{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\HUAWEI\\\\Documents\\\\GitHub\\\\SinfonyPlataforma\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\HUAWEI\\\\Documents\\\\GitHub\\\\SinfonyPlataforma\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\HUAWEI\\\\Documents\\\\GitHub\\\\SinfonyPlataforma\\\\src\\\\views\\\\Components\\\\CrearArchivo\\\\obtenerHtml.js\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\n/*eslint-disable*/\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { useSelector } from \"react-redux\";\nimport ComponenteHtml from '../ComponentsHtml/componenteHtml';\nimport TipoTextoHtml from '../ComponentsHtml/tipoTextoHtml';\nimport CambiarVocabulario from '../Digitacion/CambiarVocabulario';\n\n// @material-ui/core components\nimport { makeStyles } from '@material-ui/core/styles';\nimport Slide from \"@material-ui/core/Slide\";\n\n// @material-ui/icons\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\n\n// core components\nimport Heading from \"components/Heading/Heading.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport GridItem from \"components/Grid/GridItem.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardText from \"components/Card/CardText.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardIcon from \"components/Card/CardIcon.js\";\nimport { green } from '@material-ui/core/colors';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from '@material-ui/lab/Alert';\nimport useStyles from \"../../../assets/jss/material-dashboard-pro-react/views/common\";\nimport { textSpanOverlapsWith } from \"typescript\";\nvar useStyles2 = makeStyles(function (theme) {\n  return {\n    root: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    wrapper: {\n      margin: theme.spacing(1),\n      position: 'relative'\n    },\n    buttonSuccess: {\n      backgroundColor: green[500],\n      '&:hover': {\n        backgroundColor: green[700]\n      }\n    },\n    fabProgress: {\n      color: '#FFFFFF',\n      position: 'absolute',\n      top: -6,\n      left: -6,\n      zIndex: 1\n    },\n    buttonProgress: {\n      color: '#FFFFFF',\n      position: 'absolute'\n    },\n    progress: {\n      marginTop: '10px'\n    }\n  };\n});\nexport default function ObtenerHtml(props) {\n  var _this = this;\n  var auth = useSelector(function (state) {\n    return state.auth;\n  });\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    cantidad = _React$useState2[0],\n    setCantidad = _React$useState2[1];\n  var _React$useState3 = React.useState(''),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    genero = _React$useState4[0],\n    setGenero = _React$useState4[1];\n  var _React$useState5 = React.useState(parseInt(props.history.location.state.idDocu)),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    seleccion = _React$useState6[0],\n    setSeleccion = _React$useState6[1];\n  var _React$useState7 = React.useState([]),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    datos = _React$useState8[0],\n    setDatos = _React$useState8[1];\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    datoshtml = _useState2[0],\n    setDatoshtml = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    varJson = _useState4[0],\n    setVarJson = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    archivoJson = _useState6[0],\n    setArchivoJson = _useState6[1];\n  var classes = useStyles();\n  var classes2 = useStyles2();\n  var _React$useState9 = React.useState(false),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    loading = _React$useState10[0],\n    setLoading = _React$useState10[1];\n  var _React$useState11 = React.useState(false),\n    _React$useState12 = _slicedToArray(_React$useState11, 2),\n    success = _React$useState12[0],\n    setSuccess = _React$useState12[1];\n  useEffect(function () {\n    var data = datos.map(function (linea, index) {\n      var html = [];\n      var foundit = [\"inicio\"];\n      var activateY = false;\n      var parrafoRepetido = \"\";\n      linea.hijos.forEach(function (item, index) {\n        var foundY = item.texto.match(/(Y{3})\\w*:\\w*(Y{3})/gm);\n        parrafoHtml = item.texto;\n        console.log(item.texto);\n        console.log(foundY);\n        var endFoundY = item.texto.match(/(Y{3})\\\\\\w*:\\w*(Y{3})/gm);\n        console.log(endFoundY);\n        if (foundY) {\n          activateY = true;\n        }\n        var parrafoHtml = [];\n        console.log(activateY);\n        var XXXenY = \"\";\n        var textXXXSegunda = \"\";\n        var textXXXPrimera = \"\";\n        if (activateY) {\n          var inicio = 0;\n          //Si hay varios YYY-YYY en un mismo parrafo\n          if (foundY.length >= 1) {\n            foundY.map(function (name, ind) {\n              // Reemplazar campos XXX en el texto antes de realizar las divisiones\n              var foundX = item.texto.match(/(X{3})\\w*:\\w*(X{3})/gm);\n              console.log(\"item.texto\");\n              console.log(item.texto);\n              if (Array.isArray(foundX)) {\n                console.log(\"XXX en texto\");\n                if (foundX.length === 1) {\n                  foundX.map(function (element, index) {\n                    console.log(element);\n                    var cantidadX;\n                    var generoX = \"Masculino\";\n                    var numeroH = 0;\n                    var numeroM = 0;\n                    archivoJson.map(function (item, ind) {\n                      if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                        archivoJson[ind].valor.map(function (subitem, subind) {\n                          if (subitem.tipo === 'inviciblesologenero') {\n                            if (subitem.valor === 'Masculino') {\n                              numeroH = numeroH + 1;\n                            } else if (subitem.valor === 'Femenino') {\n                              numeroM = numeroM + 1;\n                            }\n                          }\n                        });\n                        if (numeroH > numeroM) {\n                          generoX = \"Masculino\";\n                        } else if (numeroM > 0) {\n                          generoX = \"Femenino\";\n                        }\n                        cantidadX = item.cantidad;\n                      }\n                    });\n                    XXXenY = CambiarVocabulario({\n                      found: element,\n                      texto: item.texto,\n                      genero: generoX,\n                      cantidad: cantidadX\n                    });\n                    console.log(XXXenY);\n                  });\n                } else if (foundX.length > 1) {\n                  var parrafo = item.texto;\n                  console.log(\"item.texto en XXX s\");\n                  console.log(item.texto);\n                  var tempParrafo = '';\n                  foundX.map(function (element, index) {\n                    var cantidadX;\n                    var generoX = \"Masculino\";\n                    var numeroH = 0;\n                    var numeroM = 0;\n                    archivoJson.map(function (item, ind) {\n                      if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                        archivoJson[ind].valor.map(function (subitem, subind) {\n                          if (subitem.tipo === 'inviciblesologenero') {\n                            if (subitem.valor === 'Masculino') {\n                              numeroH = numeroH + 1;\n                            } else if (subitem.valor === 'Femenino') {\n                              numeroM = numeroM + 1;\n                            }\n                          }\n                        });\n                        if (numeroH > numeroM) {\n                          generoX = \"Masculino\";\n                        } else if (numeroM > 0) {\n                          generoX = \"Femenino\";\n                        }\n                        cantidadX = item.cantidad;\n                      }\n                    });\n                    tempParrafo = CambiarVocabulario({\n                      found: element,\n                      texto: parrafo,\n                      genero: generoX,\n                      cantidad: cantidadX\n                    });\n                    parrafo = tempParrafo;\n                  });\n                  XXXenY = parrafo;\n                  console.log(XXXenY);\n                }\n              }\n\n              // Separar frases para sacar YYY\n              console.log(\"XXXenY\");\n              console.log(XXXenY);\n              var value = XXXenY != \"\" ? XXXenY : item.texto;\n              console.log(\"value\");\n              console.log(value);\n              var primeraFrase = value.substring(inicio, value.indexOf(name)); // for finding the first part\n              var indexNuevo = value.indexOf(name) + name.length; //for the last part\n              var segundaFrase = value.substring(indexNuevo, value.indexOf(endFoundY[ind]));\n              var nuevoInicio = value.indexOf(endFoundY[ind]) + endFoundY[ind].length; //for the last part\n              console.log(primeraFrase);\n              console.log(segundaFrase);\n              inicio = nuevoInicio;\n              console.log(\"foundY\");\n              console.log(name);\n\n              // Proceso para reescribir campos XXX--XXX en segunda frase\n              console.log(item.texto);\n              var foundXSegunda = segundaFrase.match(/(X{3})\\w*(X{3})/gm);\n              if (Array.isArray(foundXSegunda)) {\n                console.log(\"SegundaFraseXXX\");\n                if (foundXSegunda.length === 1) {\n                  foundXSegunda.map(function (element, index) {\n                    console.log(element);\n                    var cantidadX;\n                    var generoX = \"\";\n                    var numeroH = 0;\n                    var numeroM = 0;\n                    archivoJson.map(function (item, ind) {\n                      if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                        archivoJson[ind].valor.map(function (subitem, subind) {\n                          if (subitem.tipo === 'inviciblesologenero') {\n                            if (subitem.valor === 'Masculino') {\n                              numeroH = numeroH + 1;\n                            } else if (subitem.valor === 'Femenino') {\n                              numeroM = numeroM + 1;\n                            }\n                          }\n                        });\n                        if (numeroH > numeroM) {\n                          generoX = \"Masculino\";\n                        } else if (numeroM > 0) {\n                          generoX = \"Femenino\";\n                        }\n                        cantidadX = item.cantidad;\n                      }\n                    });\n                    textXXXSegunda = CambiarVocabulario({\n                      found: element,\n                      texto: item.texto,\n                      genero: generoX,\n                      cantidad: cantidadX\n                    });\n                    console.log(textXXXSegunda);\n                  });\n                } else if (foundXSegunda.length > 1) {\n                  var _parrafo = item.texto;\n                  var _tempParrafo = '';\n                  foundXSegunda.map(function (element, index) {\n                    console.log(element);\n                    var cantidadX;\n                    var generoX = \"\";\n                    var numeroH = 0;\n                    var numeroM = 0;\n                    archivoJson.map(function (item, ind) {\n                      if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                        archivoJson[ind].valor.map(function (subitem, subind) {\n                          if (subitem.tipo === 'inviciblesologenero') {\n                            if (subitem.valor === 'Masculino') {\n                              numeroH = numeroH + 1;\n                            } else if (subitem.valor === 'Femenino') {\n                              numeroM = numeroM + 1;\n                            }\n                          }\n                        });\n                        if (numeroH > numeroM) {\n                          generoX = \"Masculino\";\n                        } else if (numeroM > 0) {\n                          generoX = \"Femenino\";\n                        }\n                        cantidadX = item.cantidad;\n                      }\n                    });\n                    _tempParrafo = CambiarVocabulario({\n                      found: element,\n                      texto: _parrafo,\n                      genero: generoX,\n                      cantidad: cantidadX\n                    });\n                    console.log(textXXXSegunda);\n                    _parrafo = _tempParrafo;\n                  });\n                  textXXXSegunda = _parrafo;\n                }\n              }\n\n              // Proceso para reescribir campos XXX--XXX en primera frase\n              var foundXPrimera = primeraFrase.match(/(X{3})\\w*(X{3})/gm);\n              if (Array.isArray(foundXPrimera)) {\n                console.log(\"PrimeraFraseXXX\");\n                if (foundXPrimera.length === 1) {\n                  foundXPrimera.map(function (element, index) {\n                    console.log(element);\n                    var cantidadX;\n                    var generoX = \"\";\n                    var numeroH = 0;\n                    var numeroM = 0;\n                    archivoJson.map(function (item, ind) {\n                      if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                        archivoJson[ind].valor.map(function (subitem, subind) {\n                          if (subitem.tipo === 'inviciblesologenero') {\n                            if (subitem.valor === 'Masculino') {\n                              numeroH = numeroH + 1;\n                            } else if (subitem.valor === 'Femenino') {\n                              numeroM = numeroM + 1;\n                            }\n                          }\n                        });\n                        if (numeroH > numeroM) {\n                          generoX = \"Masculino\";\n                        } else if (numeroM > 0) {\n                          generoX = \"Femenino\";\n                        }\n                        cantidadX = item.cantidad;\n                      }\n                    });\n                    textXXXPrimera = CambiarVocabulario({\n                      found: element,\n                      texto: item.texto,\n                      genero: generoX,\n                      cantidad: cantidadX\n                    });\n                    console.log(textXXXPrimera);\n                  });\n                } else if (foundXPrimera.length > 1) {\n                  var _parrafo2 = item.texto;\n                  var _tempParrafo2 = '';\n                  foundXPrimera.map(function (element, index) {\n                    console.log(element);\n                    var cantidadX;\n                    var generoX = \"\";\n                    var numeroH = 0;\n                    var numeroM = 0;\n                    archivoJson.map(function (item, ind) {\n                      if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                        archivoJson[ind].valor.map(function (subitem, subind) {\n                          if (subitem.tipo === 'inviciblesologenero') {\n                            if (subitem.valor === 'Masculino') {\n                              numeroH = numeroH + 1;\n                            } else if (subitem.valor === 'Femenino') {\n                              numeroM = numeroM + 1;\n                            }\n                          }\n                        });\n                        console.log(\"genero\");\n                        console.log(numeroH);\n                        console.log(numeroM);\n                        if (numeroH > numeroM) {\n                          generoX = \"Masculino\";\n                        } else if (numeroM > 0) {\n                          if (numeroH === 0) {\n                            generoX = \"Femenino\";\n                          }\n                        }\n                        cantidadX = item.cantidad;\n                      }\n                    });\n                    _tempParrafo2 = CambiarVocabulario({\n                      found: element,\n                      texto: _parrafo2,\n                      genero: generoX,\n                      cantidad: cantidadX\n                    });\n                    console.log(textXXXPrimera);\n                    _parrafo2 = _tempParrafo2;\n                  });\n                  textXXXPrimera = _parrafo2;\n                }\n              }\n              console.log(\"archivoJson\");\n              console.log(archivoJson);\n\n              // Reemplazar ZZZ - XXX dentro de un YYY\n              console.log(\"entra Si encontro ZZZ en YYY\");\n              var found = segundaFrase.match(/(Z{3})\\w*:\\w*:\\w*(Z{3})/gm);\n              if (Array.isArray(found)) {\n                if (textXXXSegunda != '') {\n                  if (found.length === 1) {\n                    console.log(\"FoundLength = 1\");\n                    found.map(function (element, index) {\n                      var contador = [];\n                      var repetido = false;\n                      var posicionArrayCampos = 0;\n                      if (item.texto != '') {\n                        //Encontrar de que Array son los subcampos\n                        archivoJson.map(function (item, ind) {\n                          if (name.slice(3, -3).split(':')[0] === item.nombre) {\n                            posicionArrayCampos = ind;\n                          }\n                        });\n\n                        //Cuando solo venga un campo en un parrafo                                \n                        //verificar que no se repite un campo mas de dos veces\n                        foundit.map(function (campo) {\n                          if (element.slice(3, -3).split(':')[1] === campo) {\n                            repetido = true;\n                          }\n                        });\n\n                        //encontrar posición del valor\n                        if (!repetido) {\n                          foundit.push(element.slice(3, -3).split(':')[1]);\n                          archivoJson[posicionArrayCampos].valor.map(function (item, ind) {\n                            if (element.slice(3, -3).split(':')[1] === item.nombre.split('_')[0]) {\n                              contador.push(ind);\n                            }\n                          });\n\n                          //VAMOS ACA, SE ENVIA EL JSON {TIPO: NOMBRE: VALOR} -> DEL CAMPO ENCONTRADO EN LA SUBARRAY DENTRO DE LA ARRAY GENERAL \n                          html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                            key: index,\n                            negrilla: item.negrilla,\n                            letra: item.letra,\n                            italica: item.italica,\n                            size: item.size,\n                            texto: TipoTextoHtml({\n                              found: element,\n                              texto: textXXXSegunda,\n                              json: archivoJson[ind].valor[contador[0]]\n                            })[0],\n                            __self: _this,\n                            __source: {\n                              fileName: _jsxFileName,\n                              lineNumber: 381,\n                              columnNumber: 63\n                            }\n                          }));\n                        }\n                      }\n                    });\n                  } else if (found.length > 1) {\n                    console.log(\"FoundLength > 1\");\n                    var _parrafo3 = textXXXSegunda;\n                    var _tempParrafo3 = [];\n                    var repetido;\n                    var posicionArrayCampos = 0;\n                    found.map(function (element, index) {\n                      var contador = [];\n                      repetido = false;\n                      if (_parrafo3 != '') {\n                        archivoJson.map(function (item, ind) {\n                          if (name.slice(3, -3).split(':')[0] === item.nombre) {\n                            posicionArrayCampos = ind;\n                          }\n                        });\n                        //Cuando solo venga un campo en un parrafo\n                        //verificar que no se repite un campo mas de dos veces\n                        foundit.map(function (campo) {\n                          if (element.slice(3, -3).split(':')[1] === campo) {\n                            repetido = true;\n                          }\n                        });\n                        //encontrar posición del valor\n                        if (!repetido) {\n                          foundit.push(element.slice(3, -3).split(':')[1]);\n                          archivoJson[posicionArrayCampos].valor.map(function (item, ind) {\n                            if (element.slice(3, -3).split(':')[1] === item.nombre.split('_')[0]) {\n                              contador.push(ind);\n                            }\n                          });\n                          _tempParrafo3 = TipoTextoHtml({\n                            found: element,\n                            texto: _parrafo3,\n                            json: archivoJson[ind].valor[contador[0]]\n                          });\n                          _parrafo3 = _tempParrafo3[1];\n                        }\n                      }\n                    });\n                    if (!repetido) {\n                      html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                        key: index,\n                        negrilla: item.negrilla,\n                        letra: item.letra,\n                        italica: item.italica,\n                        size: 12,\n                        texto: _tempParrafo3[0],\n                        __self: _this,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 428,\n                          columnNumber: 55\n                        }\n                      }));\n                    }\n                  }\n                } else {\n                  //Código para HTML si no se encuentra XXX\n                  if (found.length === 1) {\n                    console.log(\"FoundLength = 1\");\n                    found.map(function (element, index) {\n                      var contador = [];\n                      var repetido = false;\n                      var posicionArrayCampos = 0;\n                      if (item.texto != '') {\n                        archivoJson.map(function (item, ind) {\n                          if (name.slice(3, -3).split(':')[0] === item.nombre) {\n                            posicionArrayCampos = ind;\n                          }\n                        });\n                        console.log(\"indexPosición :\" + posicionArrayCampos);\n                        //Cuando solo venga un campo en un parrafo                                \n                        //verificar que no se repite un campo mas de dos veces\n                        foundit.map(function (campo) {\n                          if (element.slice(3, -3).split(':')[1] === campo) {\n                            repetido = true;\n                          }\n                        });\n                        //encontrar posición del valor\n                        if (!repetido) {\n                          foundit.push(element.slice(3, -3).split(':')[1]);\n                          var nombreDelCampo = element.slice(3, -3).split(':')[1];\n                          var subNombreDelCampo = element.slice(3, -3).split(':')[1];\n                          var subContador = 1;\n                          var cadenaArray = '';\n                          archivoJson[posicionArrayCampos].valor.map(function (campos, ind) {\n                            console.log(segundaFrase.replace(/ /g, ''));\n                            console.log(campos.nombre);\n                            console.log(nombreDelCampo);\n                            if (subNombreDelCampo === campos.nombre) {\n                              cadenaArray = cadenaArray + TipoTextoHtml({\n                                found: element,\n                                texto: segundaFrase.replace(/ /g, ''),\n                                json: archivoJson[posicionArrayCampos].valor[ind]\n                              })[1] + ', ';\n                              contador.push(ind);\n                              console.log(cadenaArray);\n                              subNombreDelCampo = nombreDelCampo + \"_\" + subContador;\n                              subContador = subContador + 1;\n                              //console.log(nombreDelCampo)\n                            }\n                          });\n                          console.log(\"parrafoHtml entra\");\n                          console.log(segundaFrase);\n                          var textoSinY = TipoTextoHtml({\n                            found: segundaFrase,\n                            texto: parrafoHtml[1] ? parrafoHtml[1] : value,\n                            json: {\n                              tipo: \"text\",\n                              nombre: \"\",\n                              orden: \"1\",\n                              valor: cadenaArray\n                            }\n                          });\n                          parrafoHtml = textoSinY;\n                          console.log(\"parrafoHtml\");\n                          console.log(parrafoHtml);\n                        }\n                      }\n                    });\n                  } else if (found.length > 1) {\n                    console.log(\"FoundLength > 1\");\n                    var _parrafo4 = value;\n                    var parrafoYYY = '';\n                    var _tempParrafo4 = [];\n                    var _repetido = false;\n                    var _posicionArrayCampos = 0;\n                    if (_parrafo4 != '') {\n                      //Averiguar el json de YYY\n                      archivoJson.map(function (item, ind) {\n                        if (name.slice(3, -3).split(':')[0] === item.nombre) {\n                          _posicionArrayCampos = ind;\n                        }\n                      });\n                      //verificar que no se repite un campo mas de dos veces                                            \n                      if (!_repetido) {\n                        var subCadenaArray = segundaFrase;\n                        var contadorFinal = 0;\n                        var subContador = 0;\n                        var cadenaArray = '';\n                        archivoJson[_posicionArrayCampos].valor.map(function (campos, ind) {\n                          foundit.push(campos.nombre);\n                          var nombreDelCampo = campos.nombre;\n                          var subNombreDelCampo = campos.nombre;\n                          found.map(function (campoBase, index) {\n                            //verificar que no se repite un campo mas de dos veces\n                            foundit.map(function (campo) {\n                              if (campoBase.slice(3, -3).split(':')[1] === campo) {\n                                _repetido = true;\n                              }\n                            });\n                            //\n                            if (subContador === 0) {\n                              if (subNombreDelCampo === campoBase.slice(3, -3).split(':')[1]) {\n                                contadorFinal = contadorFinal + 1;\n                                subCadenaArray = TipoTextoHtml({\n                                  found: campoBase,\n                                  texto: subCadenaArray,\n                                  json: archivoJson[_posicionArrayCampos].valor[ind]\n                                })[1];\n                                console.log(\"subCadenaArray = 0\");\n                                console.log(subCadenaArray);\n                              }\n                            } else {\n                              var nombreNuevo = campoBase.slice(3, -3).split(':')[1] + \"_\" + subContador;\n                              console.log(\"nombres >1\");\n                              console.log(nombreNuevo);\n                              console.log(subNombreDelCampo);\n                              if (subNombreDelCampo === nombreNuevo) {\n                                contadorFinal = contadorFinal + 1;\n                                subCadenaArray = TipoTextoHtml({\n                                  found: campoBase,\n                                  texto: subCadenaArray,\n                                  json: archivoJson[_posicionArrayCampos].valor[ind]\n                                })[1];\n                                console.log(\"subCadenaArray != 0\");\n                                console.log(subCadenaArray);\n                              }\n                            }\n                            console.log(\"ContadorFinal === found.length\");\n                            console.log(contadorFinal);\n                            console.log(found.length);\n                            if (contadorFinal === found.length) {\n                              cadenaArray = cadenaArray + subCadenaArray;\n                              console.log(\"cadenaArray > 1\");\n                              console.log(cadenaArray);\n                              contadorFinal = 0;\n                              subContador = subContador + 1;\n                              subCadenaArray = segundaFrase;\n                            }\n                          });\n                          parrafoYYY = cadenaArray;\n                        });\n                        console.log(\"ITEMS\");\n                        console.log(_parrafo4.replace(segundaFrase, parrafoYYY));\n                        console.log(segundaFrase);\n                        console.log(parrafoYYY);\n                        console.log(parrafoHtml[1]);\n                        _parrafo4 = TipoTextoHtml({\n                          found: segundaFrase,\n                          texto: parrafoHtml[1] ? parrafoHtml[1] : value,\n                          json: {\n                            tipo: \"text\",\n                            nombre: \"\",\n                            orden: \"1\",\n                            valor: parrafoYYY\n                          }\n                        });\n                        parrafoHtml = _parrafo4;\n                        console.log(_parrafo4);\n                      }\n                    }\n                    if (!_repetido) {\n                      html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                        key: index,\n                        negrilla: item.negrilla,\n                        letra: item.letra,\n                        italica: item.italica,\n                        size: 12,\n                        texto: _tempParrafo4[0],\n                        __self: _this,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 569,\n                          columnNumber: 55\n                        }\n                      }));\n                    }\n                  }\n                }\n              } else {\n                if (textXXXSegunda != '') {\n                  if (parrafoRepetido != textXXXSegunda && parrafoRepetido != item.texto) {\n                    html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                      key: index,\n                      negrilla: item.negrilla,\n                      letra: item.letra,\n                      italica: item.italica,\n                      size: item.size,\n                      texto: textXXXSegunda + \" \",\n                      __self: _this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 585,\n                        columnNumber: 51\n                      }\n                    }));\n                  }\n                  parrafoRepetido = item.texto;\n                } else {\n                  console.log(\"No es igual\" + textXXXSegunda);\n                  if (parrafoRepetido != item.texto) {\n                    html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                      key: index,\n                      negrilla: item.negrilla,\n                      letra: item.letra,\n                      italica: item.italica,\n                      size: item.size,\n                      texto: item.texto + \" \",\n                      __self: _this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 599,\n                        columnNumber: 51\n                      }\n                    }));\n                  }\n                  parrafoRepetido = item.texto;\n                }\n              }\n              if (primeraFrase) {\n                var _found = primeraFrase.match(/(Z{3})\\w*:\\w*:\\w*(Z{3})/gm);\n                console.log(\"found primeraFrase\");\n                console.log(_found);\n                if (Array.isArray(_found)) {\n                  if (textXXXPrimera != '') {\n                    if (_found.length === 1) {\n                      _found.map(function (element, index) {\n                        var contador = [];\n                        var repetido = false;\n                        if (item.texto != '') {\n                          //Cuando solo venga un campo en un parrafo                                \n                          //verificar que no se repite un campo mas de dos veces\n                          foundit.map(function (campo) {\n                            if (element.slice(3, -3).split(':')[1] === campo) {\n                              repetido = true;\n                            }\n                          });\n                          //encontrar posición del valor\n                          if (!repetido) {\n                            foundit.push(element.slice(3, -3).split(':')[1]);\n                            archivoJson.map(function (item, ind) {\n                              if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                                contador.push(ind);\n                              }\n                            });\n                            html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                              key: index,\n                              negrilla: item.negrilla,\n                              letra: item.letra,\n                              italica: item.italica,\n                              size: item.size,\n                              texto: TipoTextoHtml({\n                                found: element,\n                                texto: textXXXPrimera,\n                                json: archivoJson[contador[0]]\n                              })[0],\n                              __self: _this,\n                              __source: {\n                                fileName: _jsxFileName,\n                                lineNumber: 640,\n                                columnNumber: 67\n                              }\n                            }));\n                          }\n                        }\n                      });\n                    } else if (_found.length > 1) {\n                      var _parrafo5 = textXXXPrimera;\n                      var _tempParrafo5 = [];\n                      var _repetido2;\n                      _found.map(function (element, index) {\n                        var contador = [];\n                        _repetido2 = false;\n                        if (_parrafo5 != '') {\n                          //Cuando solo venga un campo en un parrafo\n                          //verificar que no se repite un campo mas de dos veces\n                          foundit.map(function (campo) {\n                            if (element.slice(3, -3).split(':')[1] === campo) {\n                              _repetido2 = true;\n                            }\n                          });\n                          //encontrar posición del valor\n                          if (!_repetido2) {\n                            foundit.push(element.slice(3, -3).split(':')[1]);\n                            archivoJson.map(function (item, ind) {\n                              if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                                contador.push(ind);\n                              }\n                            });\n                            _tempParrafo5 = TipoTextoHtml({\n                              found: element,\n                              texto: _parrafo5,\n                              json: archivoJson[contador[0]]\n                            });\n                            _parrafo5 = _tempParrafo5[1];\n                          }\n                        }\n                      });\n                      if (!_repetido2) {\n                        html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                          key: index,\n                          negrilla: item.negrilla,\n                          letra: item.letra,\n                          italica: item.italica,\n                          size: 12,\n                          texto: _tempParrafo5[0],\n                          __self: _this,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 680,\n                            columnNumber: 59\n                          }\n                        }));\n                      }\n                    }\n                  } else {\n                    //Campos ZZZ sin haber XXX\n                    if (_found.length === 1) {\n                      _found.map(function (element, index) {\n                        var contador = [];\n                        var repetido = false;\n                        if (item.texto != '') {\n                          //Cuando solo venga un campo en un parrafo                                \n                          //console.log(item.texto)\n                          //verificar que no se repite un campo mas de dos veces\n                          foundit.map(function (campo) {\n                            if (element.slice(3, -3).split(':')[1] === campo) {\n                              repetido = true;\n                            }\n                          });\n                          //encontrar posición del valor\n                          if (!repetido) {\n                            foundit.push(element.slice(3, -3).split(':')[1]);\n                            archivoJson.map(function (item, ind) {\n                              if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                                contador.push(ind);\n                              }\n                            });\n                            var tempParra = TipoTextoHtml({\n                              found: element,\n                              texto: parrafoHtml[1] ? parrafoHtml[1] : value,\n                              json: archivoJson[contador[0]]\n                            });\n                            parrafoHtml = tempParra;\n                            console.log(\"parrafoHtml\");\n                            console.log(parrafoHtml);\n                          }\n                        }\n                      });\n                    } else if (_found.length > 1) {\n                      var _parrafo6 = value;\n                      var _tempParrafo6 = [];\n                      var _repetido3;\n                      _found.map(function (element, index) {\n                        var contador = [];\n                        _repetido3 = false;\n                        if (_parrafo6 != '') {\n                          //Cuando solo venga un campo en un parrafo\n                          //verificar que no se repite un campo mas de dos veces\n                          foundit.map(function (campo) {\n                            if (element.slice(3, -3).split(':')[1] === campo) {\n                              _repetido3 = true;\n                            }\n                          });\n                          //encontrar posición del valor\n                          if (!_repetido3) {\n                            foundit.push(element.slice(3, -3).split(':')[1]);\n                            archivoJson.map(function (item, ind) {\n                              if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                                contador.push(ind);\n                              }\n                            });\n                            _tempParrafo6 = TipoTextoHtml({\n                              found: element,\n                              texto: _parrafo6,\n                              json: archivoJson[contador[0]]\n                            });\n                            _parrafo6 = _tempParrafo6[1];\n                          }\n                        }\n                      });\n                      if (!_repetido3) {\n                        html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                          key: index,\n                          negrilla: item.negrilla,\n                          letra: item.letra,\n                          italica: item.italica,\n                          size: 12,\n                          texto: _tempParrafo6[0],\n                          __self: _this,\n                          __source: {\n                            fileName: _jsxFileName,\n                            lineNumber: 750,\n                            columnNumber: 59\n                          }\n                        }));\n                      }\n                    }\n                  }\n                }\n              }\n            });\n            //Saltar a otro parrafo, despues de analizar el presente\n            if (endFoundY) {\n              var parteTexto = parrafoHtml[1];\n              foundY.map(function (element, ind) {\n                parteTexto = parteTexto.replace(element.toString(), '');\n                console.log(parteTexto);\n                console.log(element);\n              });\n              endFoundY.map(function (element, ind) {\n                parteTexto = parteTexto.replace(element, '');\n              });\n              html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                key: index,\n                negrilla: item.negrilla,\n                letra: item.letra,\n                italica: item.italica,\n                size: 12,\n                texto: /*#__PURE__*/React.createElement(\"span\", {\n                  style: {\n                    background: 'yellow'\n                  },\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 782,\n                    columnNumber: 40\n                  }\n                }, \" \" + parteTexto, \" \"),\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 776,\n                  columnNumber: 39\n                }\n              }));\n              activateY = false;\n            }\n          }\n        } else {\n          console.log(\"entra Si no encontro YYY\");\n          var foundX = item.texto.match(/(X{3})\\w*:\\w*(X{3})/gm);\n          console.log(\"item.texto\");\n          console.log(item.texto);\n          if (Array.isArray(foundX)) {\n            console.log(\"XXX en texto\");\n            if (foundX.length === 1) {\n              foundX.map(function (element, index) {\n                console.log(element);\n                var cantidadX;\n                var generoX = \"Masculino\";\n                var numeroH = 0;\n                var numeroM = 0;\n                archivoJson.map(function (item, ind) {\n                  if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                    archivoJson[ind].valor.map(function (subitem, subind) {\n                      if (subitem.tipo === 'inviciblesologenero') {\n                        if (subitem.valor === 'Masculino') {\n                          numeroH = numeroH + 1;\n                        } else if (subitem.valor === 'Femenino') {\n                          numeroM = numeroM + 1;\n                        }\n                      }\n                    });\n                    if (numeroH > numeroM) {\n                      generoX = \"Masculino\";\n                    } else if (numeroM > 0) {\n                      generoX = \"Femenino\";\n                    }\n                    cantidadX = item.cantidad;\n                  }\n                });\n                XXXenY = CambiarVocabulario({\n                  found: element,\n                  texto: item.texto,\n                  genero: generoX,\n                  cantidad: cantidadX\n                });\n                console.log(XXXenY);\n              });\n            } else if (foundX.length > 1) {\n              var parrafo = item.texto;\n              console.log(\"item.texto en XXX s\");\n              console.log(item.texto);\n              var tempParrafo = '';\n              foundX.map(function (element, index) {\n                var cantidadX;\n                var generoX = \"Masculino\";\n                var numeroH = 0;\n                var numeroM = 0;\n                archivoJson.map(function (item, ind) {\n                  if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                    archivoJson[ind].valor.map(function (subitem, subind) {\n                      if (subitem.tipo === 'inviciblesologenero') {\n                        if (subitem.valor === 'Masculino') {\n                          numeroH = numeroH + 1;\n                        } else if (subitem.valor === 'Femenino') {\n                          numeroM = numeroM + 1;\n                        }\n                      }\n                    });\n                    if (numeroH > numeroM) {\n                      generoX = \"Masculino\";\n                    } else if (numeroM > 0) {\n                      generoX = \"Femenino\";\n                    }\n                    cantidadX = item.cantidad;\n                  }\n                });\n                tempParrafo = CambiarVocabulario({\n                  found: element,\n                  texto: parrafo,\n                  genero: generoX,\n                  cantidad: cantidadX\n                });\n                parrafo = tempParrafo;\n              });\n              XXXenY = parrafo;\n              console.log(XXXenY);\n            }\n          }\n\n          //Hallar XXX, ZZZ en parrafos donde no se encuentres YYY\n\n          var texto = XXXenY != \"\" ? XXXenY : item.texto;\n          var found = texto.match(/(Z{3})\\w*:\\w*:\\w*(Z{3})/gm);\n          if (Array.isArray(found)) {\n            if (XXXenY != '') {\n              if (found.length === 1) {\n                found.map(function (element, index) {\n                  var contador = [];\n                  var repetido = false;\n                  if (item.texto != '') {\n                    //Cuando solo venga un campo en un parrafo                                \n                    //verificar que no se repite un campo mas de dos veces\n                    foundit.map(function (campo) {\n                      if (element.slice(3, -3).split(':')[1] === campo) {\n                        repetido = true;\n                      }\n                    });\n                    //encontrar posición del valor\n                    if (!repetido) {\n                      foundit.push(element.slice(3, -3).split(':')[1]);\n                      archivoJson.map(function (item, ind) {\n                        if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                          contador.push(ind);\n                        }\n                      });\n                      html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                        key: index,\n                        negrilla: item.negrilla,\n                        letra: item.letra,\n                        italica: item.italica,\n                        size: item.size,\n                        texto: TipoTextoHtml({\n                          found: element,\n                          texto: texto,\n                          json: archivoJson[contador[0]]\n                        })[0],\n                        __self: _this,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 886,\n                          columnNumber: 55\n                        }\n                      }));\n                    }\n                  }\n                });\n              } else if (found.length > 1) {\n                var _parrafo7 = texto;\n                var _tempParrafo7 = [];\n                var repetido;\n                found.map(function (element, index) {\n                  var contador = [];\n                  repetido = false;\n                  if (_parrafo7 != '') {\n                    //Cuando solo venga un campo en un parrafo\n                    //verificar que no se repite un campo mas de dos veces\n                    foundit.map(function (campo) {\n                      if (element.slice(3, -3).split(':')[1] === campo) {\n                        repetido = true;\n                      }\n                    });\n                    //encontrar posición del valor\n                    if (!repetido) {\n                      foundit.push(element.slice(3, -3).split(':')[1]);\n                      archivoJson.map(function (item, ind) {\n                        if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                          contador.push(ind);\n                        }\n                      });\n                      _tempParrafo7 = TipoTextoHtml({\n                        found: element,\n                        texto: _parrafo7,\n                        json: archivoJson[contador[0]]\n                      });\n                      _parrafo7 = _tempParrafo7[1];\n                    }\n                  }\n                });\n                if (!repetido) {\n                  html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                    key: index,\n                    negrilla: item.negrilla,\n                    letra: item.letra,\n                    italica: item.italica,\n                    size: 12,\n                    texto: _tempParrafo7[0],\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 926,\n                      columnNumber: 47\n                    }\n                  }));\n                }\n              }\n            } else {\n              if (found.length === 1) {\n                found.map(function (element, index) {\n                  var contador = [];\n                  var repetido = false;\n                  if (item.texto != '') {\n                    //Cuando solo venga un campo en un parrafo                                \n                    //console.log(item.texto)\n                    //verificar que no se repite un campo mas de dos veces\n                    foundit.map(function (campo) {\n                      if (element.slice(3, -3).split(':')[1] === campo) {\n                        repetido = true;\n                      }\n                    });\n                    //encontrar posición del valor\n                    if (!repetido) {\n                      foundit.push(element.slice(3, -3).split(':')[1]);\n                      archivoJson.map(function (item, ind) {\n                        if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                          contador.push(ind);\n                        }\n                      });\n                      html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                        key: index,\n                        negrilla: item.negrilla,\n                        letra: item.letra,\n                        italica: item.italica,\n                        size: item.size,\n                        texto: TipoTextoHtml({\n                          found: element,\n                          texto: item.texto,\n                          json: archivoJson[contador[0]]\n                        })[0],\n                        __self: _this,\n                        __source: {\n                          fileName: _jsxFileName,\n                          lineNumber: 959,\n                          columnNumber: 55\n                        }\n                      }));\n                    }\n                  }\n                });\n              } else if (found.length > 1) {\n                var _parrafo8 = item.texto;\n                var _tempParrafo8 = [];\n                var _repetido4;\n                found.map(function (element, index) {\n                  var contador = [];\n                  _repetido4 = false;\n                  if (_parrafo8 != '') {\n                    //Cuando solo venga un campo en un parrafo\n                    //verificar que no se repite un campo mas de dos veces\n                    foundit.map(function (campo) {\n                      if (element.slice(3, -3).split(':')[1] === campo) {\n                        _repetido4 = true;\n                      }\n                    });\n                    //encontrar posición del valor\n                    if (!_repetido4) {\n                      foundit.push(element.slice(3, -3).split(':')[1]);\n                      archivoJson.map(function (item, ind) {\n                        if (element.slice(3, -3).split(':')[1] === item.nombre) {\n                          contador.push(ind);\n                        }\n                      });\n                      _tempParrafo8 = TipoTextoHtml({\n                        found: element,\n                        texto: _parrafo8,\n                        json: archivoJson[contador[0]]\n                      });\n                      _parrafo8 = _tempParrafo8[1];\n                    }\n                  }\n                });\n                if (!_repetido4) {\n                  html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                    key: index,\n                    negrilla: item.negrilla,\n                    letra: item.letra,\n                    italica: item.italica,\n                    size: 12,\n                    texto: _tempParrafo8[0],\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 999,\n                      columnNumber: 47\n                    }\n                  }));\n                }\n              }\n            }\n          } else {\n            if (texto != '') {\n              if (parrafoRepetido != texto && parrafoRepetido != item.texto) {\n                html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                  key: index,\n                  negrilla: item.negrilla,\n                  letra: item.letra,\n                  italica: item.italica,\n                  size: item.size,\n                  texto: texto + \" \",\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1015,\n                    columnNumber: 43\n                  }\n                }));\n              }\n              parrafoRepetido = item.texto;\n            } else {\n              console.log(\"No es igual\" + texto);\n              if (parrafoRepetido != item.texto) {\n                html.push(/*#__PURE__*/React.createElement(ComponenteHtml, {\n                  key: index,\n                  negrilla: item.negrilla,\n                  letra: item.letra,\n                  italica: item.italica,\n                  size: item.size,\n                  texto: item.texto + \" \",\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 1029,\n                    columnNumber: 43\n                  }\n                }));\n              }\n              parrafoRepetido = item.texto;\n            }\n          }\n        }\n        // Proceso para reescribir campos ZZZ--ZZZ\n      });\n      return html;\n    });\n    setDatoshtml(data);\n    setSuccess(true);\n    setLoading(false);\n  }, [datos]);\n  useEffect(function () {\n    //console.log(\"Recibe Campos\");\n    setSuccess(false);\n    setLoading(true);\n    //Axios\n    var config = {\n      method: 'get',\n      url: process.env.REACT_APP_URL_API + '/api/documentosAgiles/' + seleccion + '/showWithFile',\n      headers: {\n        Authorization: \"Bearer \".concat(auth.token),\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    var fechData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios(config).then(function (response) {\n                var fields = JSON.parse(response.data.json);\n                setCantidad(fields.cantidad);\n                setGenero(fields.genero);\n                //console.log(response)\n                onFileUpload(response.data.archivoJson, fields.archivoJson);\n              });\n            case 2:\n              result = _context.sent;\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function fechData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fechData();\n  }, []);\n  var onFileUpload = function onFileUpload(archivo, json) {\n    // Create an object of formData \n    if (archivo) {\n      setArchivoJson(json);\n      loaddata(archivo);\n    }\n  };\n  var loaddata = function loaddata(archivo) {\n    var arraydata = archivo.blocks.map(function (item) {\n      var align = \"\";\n      var hijos = [];\n      var indices = [];\n      var intervalos = [];\n      var temp = 0;\n      if (item.data[\"text-align\"]) {\n        align = item.data[\"text-align\"];\n      }\n      if (item.inlineStyleRanges.length > 0) {\n        item.inlineStyleRanges.forEach(function (indice) {\n          if (indices.indexOf(indice.offset) === -1) {\n            indices.push(indice.offset);\n          }\n          if (indices.indexOf(indice.offset + indice.length) === -1) {\n            indices.push(indice.offset + indice.length);\n          }\n        });\n        indices.push(item.text.length);\n        indices.sort(function (a, b) {\n          return a - b;\n        });\n        indices.forEach(function (element) {\n          intervalos.push({\n            text: item.text.slice(temp, element),\n            inicio: temp,\n            fin: element\n          });\n          temp = element;\n        });\n        intervalos.forEach(function (element) {\n          var negrillaHijo = false;\n          var italicaHijo = false;\n          item.inlineStyleRanges.forEach(function (item) {\n            if (element.inicio >= item.offset && element.fin <= item.offset + item.length) {\n              switch (item.style) {\n                case \"BOLD\":\n                  negrillaHijo = true;\n                  break;\n                case \"ITALIC\":\n                  italicaHijo = true;\n                  break;\n              }\n            }\n          });\n          hijos.push({\n            letra: \"Arial\",\n            negrilla: negrillaHijo,\n            italica: italicaHijo,\n            size: \"12\",\n            texto: element.text\n          });\n        });\n      } else {\n        hijos.push({\n          letra: \"Arial\",\n          negrilla: false,\n          italica: false,\n          size: \"12\",\n          texto: item.text\n        });\n      }\n      return {\n        align: align,\n        hijos: hijos\n      };\n    });\n    //console.log(\"Prueba\")\n    setDatos(arraydata);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1145,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    title: \"Previsualizaci\\xF3n documento\",\n    textAlign: \"center\",\n    category: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149,\n        columnNumber: 27\n      }\n    }, \"Se previsualiza el documento para verificar los campos\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1146,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(GridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(GridItem, {\n    md: 8,\n    style: {\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1153,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    color: \"primary\",\n    text: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1154,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CardText, {\n    className: classes.cardText,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1155,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    className: classes.colorWhite,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1156,\n      columnNumber: 33\n    }\n  }, \" Previzualicaci\\xF3n del documento \"))), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1160,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginBottom: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1161,\n      columnNumber: 29\n    }\n  }, loading && /*#__PURE__*/React.createElement(CircularProgress, {\n    className: classes2.progress,\n    size: 100,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1162,\n      columnNumber: 45\n    }\n  }), success ? /*#__PURE__*/React.createElement(Alert, {\n    severity: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1163,\n      columnNumber: 44\n    }\n  }, \"Se ha realizado la previsualizaci\\xF3n exitosamente\") : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1163,\n      columnNumber: 129\n    }\n  })), datoshtml.map(function (item, index) {\n    var align;\n    if (datos[index].align === \"both\") {\n      align = \"justify\";\n    } else {\n      align = datos[index].align;\n    }\n    return /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: align\n      },\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 85\n      }\n    }, item));\n  }))))));\n}","map":{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","React","useEffect","useState","axios","useSelector","ComponenteHtml","TipoTextoHtml","CambiarVocabulario","makeStyles","Slide","FormatListNumberedIcon","Heading","GridContainer","GridItem","Card","CardText","CardBody","CardHeader","CardIcon","green","CircularProgress","Alert","useStyles","textSpanOverlapsWith","useStyles2","theme","root","display","alignItems","wrapper","margin","spacing","position","buttonSuccess","backgroundColor","fabProgress","color","top","left","zIndex","buttonProgress","progress","marginTop","ObtenerHtml","props","_this","auth","state","_React$useState","_React$useState2","_slicedToArray","cantidad","setCantidad","_React$useState3","_React$useState4","genero","setGenero","_React$useState5","parseInt","history","location","idDocu","_React$useState6","seleccion","setSeleccion","_React$useState7","_React$useState8","datos","setDatos","_useState","_useState2","datoshtml","setDatoshtml","_useState3","_useState4","varJson","setVarJson","_useState5","_useState6","archivoJson","setArchivoJson","classes","classes2","_React$useState9","_React$useState10","loading","setLoading","_React$useState11","_React$useState12","success","setSuccess","data","map","linea","index","html","foundit","activateY","parrafoRepetido","hijos","item","foundY","texto","match","parrafoHtml","console","log","endFoundY","XXXenY","textXXXSegunda","textXXXPrimera","inicio","ind","foundX","Array","isArray","element","cantidadX","generoX","numeroH","numeroM","split","nombre","valor","subitem","subind","tipo","found","parrafo","tempParrafo","primeraFrase","substring","indexOf","indexNuevo","segundaFrase","nuevoInicio","foundXSegunda","foundXPrimera","contador","repetido","posicionArrayCampos","campo","createElement","key","negrilla","letra","italica","size","json","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","nombreDelCampo","subNombreDelCampo","subContador","cadenaArray","campos","replace","textoSinY","orden","parrafoYYY","subCadenaArray","contadorFinal","campoBase","nombreNuevo","tempParra","parteTexto","toString","style","background","config","url","process","env","REACT_APP_URL_API","headers","Authorization","concat","token","fechData","_ref","_asyncToGenerator","_callee","result","_callee$","_context","response","fields","JSON","parse","onFileUpload","apply","arguments","archivo","loaddata","arraydata","blocks","align","indices","intervalos","temp","inlineStyleRanges","indice","offset","text","sort","b","fin","negrillaHijo","italicaHijo","title","textAlign","category","md","className","cardText","colorWhite","marginBottom","severity"],"sources":["C:/Users/HUAWEI/Documents/GitHub/SinfonyPlataforma/src/views/Components/CrearArchivo/obtenerHtml.js"],"sourcesContent":["/*eslint-disable*/\r\nimport React, { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport { useSelector } from \"react-redux\";\r\nimport ComponenteHtml from '../ComponentsHtml/componenteHtml'\r\nimport TipoTextoHtml from '../ComponentsHtml/tipoTextoHtml'\r\nimport CambiarVocabulario from '../Digitacion/CambiarVocabulario'\r\n\r\n// @material-ui/core components\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\n// @material-ui/icons\r\nimport FormatListNumberedIcon from '@material-ui/icons/FormatListNumbered';\r\n\r\n// core components\r\nimport Heading from \"components/Heading/Heading.js\";\r\nimport GridContainer from \"components/Grid/GridContainer.js\";\r\nimport GridItem from \"components/Grid/GridItem.js\";\r\nimport Card from \"components/Card/Card.js\";\r\nimport CardText from \"components/Card/CardText.js\";\r\nimport CardBody from \"components/Card/CardBody.js\";\r\nimport CardHeader from \"components/Card/CardHeader.js\";\r\nimport CardIcon from \"components/Card/CardIcon.js\";\r\nimport { green } from '@material-ui/core/colors';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nimport useStyles from \"../../../assets/jss/material-dashboard-pro-react/views/common\";\r\nimport { textSpanOverlapsWith } from \"typescript\";\r\n\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    wrapper: {\r\n        margin: theme.spacing(1),\r\n        position: 'relative',\r\n    },\r\n    buttonSuccess: {\r\n        backgroundColor: green[500],\r\n        '&:hover': {\r\n            backgroundColor: green[700],\r\n        },\r\n    },\r\n    fabProgress: {\r\n        color: '#FFFFFF',\r\n        position: 'absolute',\r\n        top: -6,\r\n        left: -6,\r\n        zIndex: 1,\r\n    },\r\n    buttonProgress: {\r\n        color: '#FFFFFF',\r\n        position: 'absolute',\r\n    },\r\n    progress: {\r\n        marginTop: '10px',\r\n    },\r\n}));\r\n\r\nexport default function ObtenerHtml(props) {\r\n\r\n    const auth = useSelector((state) => state.auth);\r\n    const [cantidad, setCantidad] = React.useState('');\r\n    const [genero, setGenero] = React.useState('');\r\n    const [seleccion, setSeleccion] = React.useState(parseInt(props.history.location.state.idDocu));\r\n    const [datos, setDatos] = React.useState([]);\r\n    let [datoshtml, setDatoshtml] = useState([]);\r\n    let [varJson, setVarJson] = useState([]);\r\n    let [archivoJson, setArchivoJson] = useState([]);\r\n    const classes = useStyles();\r\n    const classes2 = useStyles2();\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [success, setSuccess] = React.useState(false);\r\n\r\n    useEffect(() => {\r\n        let data = datos.map((linea, index) => {\r\n            let html = [];\r\n            let foundit = [\"inicio\"];\r\n            let activateY = false;\r\n            let parrafoRepetido = \"\";\r\n            linea.hijos.forEach((item, index) => {\r\n                let foundY = item.texto.match(/(Y{3})\\w*:\\w*(Y{3})/gm);\r\n                parrafoHtml = item.texto\r\n                console.log(item.texto);\r\n                console.log(foundY);\r\n                let endFoundY = item.texto.match(/(Y{3})\\\\\\w*:\\w*(Y{3})/gm);\r\n                console.log(endFoundY);\r\n                if (foundY) {\r\n                    activateY = true;\r\n                }\r\n                let parrafoHtml = [];\r\n                console.log(activateY);\r\n                let XXXenY = \"\"\r\n                let textXXXSegunda = \"\";\r\n                let textXXXPrimera = \"\";\r\n                if (activateY) {\r\n                    let inicio = 0;\r\n                    //Si hay varios YYY-YYY en un mismo parrafo\r\n                    if (foundY.length >= 1) {\r\n                        foundY.map((name, ind) => {\r\n\r\n                            // Reemplazar campos XXX en el texto antes de realizar las divisiones\r\n                            let foundX = item.texto.match(/(X{3})\\w*:\\w*(X{3})/gm)\r\n                            console.log(\"item.texto\")\r\n                            console.log(item.texto)\r\n                            if (Array.isArray(foundX)) {\r\n                                console.log(\"XXX en texto\")\r\n                                if (foundX.length === 1) {\r\n                                    foundX.map((element, index) => {\r\n                                        console.log(element)\r\n                                        let cantidadX;\r\n                                        let generoX = \"Masculino\";\r\n                                        let numeroH = 0;\r\n                                        let numeroM = 0;\r\n                                        archivoJson.map((item, ind) => {\r\n                                            if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                archivoJson[ind].valor.map((subitem, subind) => {\r\n                                                    if (subitem.tipo === 'inviciblesologenero') {\r\n                                                        if (subitem.valor === 'Masculino') {\r\n                                                            numeroH = numeroH + 1;\r\n                                                        } else if (subitem.valor === 'Femenino') {\r\n                                                            numeroM = numeroM + 1;\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                if (numeroH > numeroM) {\r\n                                                    generoX = \"Masculino\"\r\n                                                } else if (numeroM > 0) {\r\n                                                    generoX = \"Femenino\"\r\n                                                }\r\n                                                cantidadX = item.cantidad;\r\n                                            }\r\n                                        });\r\n                                        XXXenY = CambiarVocabulario({ found: element, texto: item.texto, genero: generoX, cantidad: cantidadX })\r\n                                        console.log(XXXenY)\r\n                                    })\r\n                                } else if (foundX.length > 1) {\r\n                                    let parrafo = item.texto;\r\n                                    console.log(\"item.texto en XXX s\")\r\n                                    console.log(item.texto)\r\n                                    let tempParrafo = '';\r\n                                    foundX.map((element, index) => {\r\n                                        let cantidadX;\r\n                                        let generoX = \"Masculino\";\r\n                                        let numeroH = 0;\r\n                                        let numeroM = 0;\r\n                                        archivoJson.map((item, ind) => {\r\n                                            if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                archivoJson[ind].valor.map((subitem, subind) => {\r\n                                                    if (subitem.tipo === 'inviciblesologenero') {\r\n                                                        if (subitem.valor === 'Masculino') {\r\n                                                            numeroH = numeroH + 1;\r\n                                                        } else if (subitem.valor === 'Femenino') {\r\n                                                            numeroM = numeroM + 1;\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                if (numeroH > numeroM) {\r\n                                                    generoX = \"Masculino\"\r\n                                                } else if (numeroM > 0) {\r\n                                                    generoX = \"Femenino\"\r\n                                                }\r\n                                                cantidadX = item.cantidad;\r\n                                            }\r\n                                        });\r\n                                        tempParrafo = CambiarVocabulario({ found: element, texto: parrafo, genero: generoX, cantidad: cantidadX })\r\n                                        parrafo = tempParrafo;\r\n                                    })\r\n                                    XXXenY = parrafo;\r\n                                    console.log(XXXenY)\r\n                                }\r\n                            }\r\n\r\n\r\n                            // Separar frases para sacar YYY\r\n                            console.log(\"XXXenY\")\r\n                            console.log(XXXenY)\r\n                            let value = XXXenY != \"\" ? XXXenY : item.texto;\r\n                            console.log(\"value\")\r\n                            console.log(value)\r\n                            let primeraFrase = value.substring(inicio, value.indexOf(name)); // for finding the first part\r\n                            let indexNuevo = value.indexOf(name) + name.length; //for the last part\r\n                            let segundaFrase = value.substring(indexNuevo, value.indexOf(endFoundY[ind]));\r\n                            let nuevoInicio = value.indexOf(endFoundY[ind]) + endFoundY[ind].length; //for the last part\r\n                            console.log(primeraFrase)\r\n                            console.log(segundaFrase)\r\n                            inicio = nuevoInicio\r\n                            console.log(\"foundY\")\r\n                            console.log(name)\r\n\r\n                            // Proceso para reescribir campos XXX--XXX en segunda frase\r\n                            console.log(item.texto)\r\n                            let foundXSegunda = segundaFrase.match(/(X{3})\\w*(X{3})/gm)\r\n                            if (Array.isArray(foundXSegunda)) {\r\n                                console.log(\"SegundaFraseXXX\")\r\n                                if (foundXSegunda.length === 1) {\r\n                                    foundXSegunda.map((element, index) => {\r\n                                        console.log(element)\r\n                                        let cantidadX;\r\n                                        let generoX = \"\";\r\n                                        let numeroH = 0;\r\n                                        let numeroM = 0;\r\n                                        archivoJson.map((item, ind) => {\r\n                                            if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                archivoJson[ind].valor.map((subitem, subind) => {\r\n                                                    if (subitem.tipo === 'inviciblesologenero') {\r\n                                                        if (subitem.valor === 'Masculino') {\r\n                                                            numeroH = numeroH + 1;\r\n                                                        } else if (subitem.valor === 'Femenino') {\r\n                                                            numeroM = numeroM + 1;\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                if (numeroH > numeroM) {\r\n                                                    generoX = \"Masculino\"\r\n                                                } else if (numeroM > 0) {\r\n                                                    generoX = \"Femenino\"\r\n                                                }\r\n                                                cantidadX = item.cantidad;\r\n                                            }\r\n                                        });\r\n                                        textXXXSegunda = CambiarVocabulario({ found: element, texto: item.texto, genero: generoX, cantidad: cantidadX })\r\n                                        console.log(textXXXSegunda)\r\n                                    })\r\n                                } else if (foundXSegunda.length > 1) {\r\n                                    let parrafo = item.texto;\r\n                                    let tempParrafo = '';\r\n                                    foundXSegunda.map((element, index) => {\r\n                                        console.log(element)\r\n                                        let cantidadX;\r\n                                        let generoX = \"\";\r\n                                        let numeroH = 0;\r\n                                        let numeroM = 0;\r\n                                        archivoJson.map((item, ind) => {\r\n                                            if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                archivoJson[ind].valor.map((subitem, subind) => {\r\n                                                    if (subitem.tipo === 'inviciblesologenero') {\r\n                                                        if (subitem.valor === 'Masculino') {\r\n                                                            numeroH = numeroH + 1;\r\n                                                        } else if (subitem.valor === 'Femenino') {\r\n                                                            numeroM = numeroM + 1;\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                if (numeroH > numeroM) {\r\n                                                    generoX = \"Masculino\"\r\n                                                } else if (numeroM > 0) {\r\n                                                    generoX = \"Femenino\"\r\n                                                }\r\n                                                cantidadX = item.cantidad;\r\n                                            }\r\n                                        });\r\n                                        tempParrafo = CambiarVocabulario({ found: element, texto: parrafo, genero: generoX, cantidad: cantidadX })\r\n                                        console.log(textXXXSegunda)\r\n                                        parrafo = tempParrafo;\r\n                                    })\r\n                                    textXXXSegunda = parrafo;\r\n                                }\r\n                            }\r\n\r\n                            // Proceso para reescribir campos XXX--XXX en primera frase\r\n                            let foundXPrimera = primeraFrase.match(/(X{3})\\w*(X{3})/gm)\r\n                            if (Array.isArray(foundXPrimera)) {\r\n                                console.log(\"PrimeraFraseXXX\")\r\n                                if (foundXPrimera.length === 1) {\r\n                                    foundXPrimera.map((element, index) => {\r\n                                        console.log(element)\r\n                                        let cantidadX;\r\n                                        let generoX = \"\";\r\n                                        let numeroH = 0;\r\n                                        let numeroM = 0;\r\n                                        archivoJson.map((item, ind) => {\r\n                                            if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                archivoJson[ind].valor.map((subitem, subind) => {\r\n                                                    if (subitem.tipo === 'inviciblesologenero') {\r\n                                                        if (subitem.valor === 'Masculino') {\r\n                                                            numeroH = numeroH + 1;\r\n                                                        } else if (subitem.valor === 'Femenino') {\r\n                                                            numeroM = numeroM + 1;\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                if (numeroH > numeroM) {\r\n                                                    generoX = \"Masculino\"\r\n                                                } else if (numeroM > 0) {\r\n                                                    generoX = \"Femenino\"\r\n                                                }\r\n                                                cantidadX = item.cantidad;\r\n                                            }\r\n                                        });\r\n                                        textXXXPrimera = CambiarVocabulario({ found: element, texto: item.texto, genero: generoX, cantidad: cantidadX })\r\n                                        console.log(textXXXPrimera)\r\n                                    })\r\n                                } else if (foundXPrimera.length > 1) {\r\n                                    let parrafo = item.texto;\r\n                                    let tempParrafo = '';\r\n                                    foundXPrimera.map((element, index) => {\r\n                                        console.log(element)\r\n                                        let cantidadX;\r\n                                        let generoX = \"\";\r\n                                        let numeroH = 0;\r\n                                        let numeroM = 0;\r\n                                        archivoJson.map((item, ind) => {\r\n                                            if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                archivoJson[ind].valor.map((subitem, subind) => {\r\n                                                    if (subitem.tipo === 'inviciblesologenero') {\r\n                                                        if (subitem.valor === 'Masculino') {\r\n                                                            numeroH = numeroH + 1;\r\n                                                        } else if (subitem.valor === 'Femenino') {\r\n                                                            numeroM = numeroM + 1;\r\n                                                        }\r\n                                                    }\r\n                                                })\r\n                                                console.log(\"genero\")\r\n                                                console.log(numeroH)\r\n                                                console.log(numeroM)\r\n                                                if (numeroH > numeroM) {\r\n                                                    generoX = \"Masculino\"\r\n                                                } else if (numeroM > 0) {\r\n                                                    if (numeroH === 0) {\r\n                                                        generoX = \"Femenino\"\r\n                                                    }\r\n                                                }\r\n                                                cantidadX = item.cantidad;\r\n                                            }\r\n                                        });\r\n                                        tempParrafo = CambiarVocabulario({ found: element, texto: parrafo, genero: generoX, cantidad: cantidadX })\r\n                                        console.log(textXXXPrimera)\r\n                                        parrafo = tempParrafo;\r\n                                    })\r\n                                    textXXXPrimera = parrafo;\r\n                                }\r\n                            }\r\n\r\n\r\n                            console.log(\"archivoJson\");\r\n                            console.log(archivoJson);\r\n\r\n                            // Reemplazar ZZZ - XXX dentro de un YYY\r\n                            console.log(\"entra Si encontro ZZZ en YYY\")\r\n\r\n                            let found = segundaFrase.match(/(Z{3})\\w*:\\w*:\\w*(Z{3})/gm)\r\n                            if (Array.isArray(found)) {\r\n                                if (textXXXSegunda != '') {\r\n                                    if (found.length === 1) {\r\n                                        console.log(\"FoundLength = 1\")\r\n                                        found.map((element, index) => {\r\n                                            let contador = [];\r\n                                            let repetido = false;\r\n                                            let posicionArrayCampos = 0;\r\n                                            if (item.texto != '') {\r\n                                                //Encontrar de que Array son los subcampos\r\n                                                archivoJson.map((item, ind) => {\r\n                                                    if (name.slice(3, -3).split(':')[0] === item.nombre) {\r\n                                                        posicionArrayCampos = ind;\r\n                                                    }\r\n                                                });\r\n\r\n                                                //Cuando solo venga un campo en un parrafo                                \r\n                                                //verificar que no se repite un campo mas de dos veces\r\n                                                foundit.map((campo) => {\r\n                                                    if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                        repetido = true;\r\n                                                    }\r\n                                                });\r\n\r\n                                                //encontrar posición del valor\r\n                                                if (!repetido) {\r\n                                                    foundit.push(element.slice(3, -3).split(':')[1])\r\n                                                    archivoJson[posicionArrayCampos].valor.map((item, ind) => {\r\n                                                        if (element.slice(3, -3).split(':')[1] === item.nombre.split('_')[0]) {\r\n                                                            contador.push(ind);\r\n                                                        }\r\n                                                    });\r\n\r\n                                                    //VAMOS ACA, SE ENVIA EL JSON {TIPO: NOMBRE: VALOR} -> DEL CAMPO ENCONTRADO EN LA SUBARRAY DENTRO DE LA ARRAY GENERAL \r\n                                                    html.push(<ComponenteHtml\r\n                                                        key={index}\r\n                                                        negrilla={item.negrilla}\r\n                                                        letra={item.letra}\r\n                                                        italica={item.italica}\r\n                                                        size={item.size}\r\n                                                        texto={TipoTextoHtml({ found: element, texto: textXXXSegunda, json: archivoJson[ind].valor[contador[0]] })[0]}\r\n                                                    />);\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                    } else if (found.length > 1) {\r\n                                        console.log(\"FoundLength > 1\")\r\n                                        let parrafo = textXXXSegunda;\r\n                                        let tempParrafo = [];\r\n                                        let repetido;\r\n                                        let posicionArrayCampos = 0;\r\n                                        found.map((element, index) => {\r\n                                            let contador = [];\r\n                                            repetido = false;\r\n                                            if (parrafo != '') {\r\n                                                archivoJson.map((item, ind) => {\r\n                                                    if (name.slice(3, -3).split(':')[0] === item.nombre) {\r\n                                                        posicionArrayCampos = ind;\r\n                                                    }\r\n                                                });\r\n                                                //Cuando solo venga un campo en un parrafo\r\n                                                //verificar que no se repite un campo mas de dos veces\r\n                                                foundit.map((campo) => {\r\n                                                    if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                        repetido = true;\r\n                                                    }\r\n                                                });\r\n                                                //encontrar posición del valor\r\n                                                if (!repetido) {\r\n                                                    foundit.push(element.slice(3, -3).split(':')[1])\r\n                                                    archivoJson[posicionArrayCampos].valor.map((item, ind) => {\r\n                                                        if (element.slice(3, -3).split(':')[1] === item.nombre.split('_')[0]) {\r\n                                                            contador.push(ind);\r\n                                                        }\r\n                                                    });\r\n                                                    tempParrafo = TipoTextoHtml({ found: element, texto: parrafo, json: archivoJson[ind].valor[contador[0]] });\r\n                                                    parrafo = tempParrafo[1];\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                        if (!repetido) {\r\n                                            html.push(<ComponenteHtml\r\n                                                key={index}\r\n                                                negrilla={item.negrilla}\r\n                                                letra={item.letra}\r\n                                                italica={item.italica}\r\n                                                size={12}\r\n                                                texto={tempParrafo[0]}\r\n                                            />);\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    //Código para HTML si no se encuentra XXX\r\n                                    if (found.length === 1) {\r\n                                        console.log(\"FoundLength = 1\")\r\n                                        found.map((element, index) => {\r\n                                            let contador = [];\r\n                                            let repetido = false;\r\n                                            let posicionArrayCampos = 0;\r\n                                            if (item.texto != '') {\r\n                                                archivoJson.map((item, ind) => {\r\n                                                    if (name.slice(3, -3).split(':')[0] === item.nombre) {\r\n                                                        posicionArrayCampos = ind;\r\n                                                    }\r\n                                                });\r\n                                                console.log(\"indexPosición :\" + posicionArrayCampos)\r\n                                                //Cuando solo venga un campo en un parrafo                                \r\n                                                //verificar que no se repite un campo mas de dos veces\r\n                                                foundit.map((campo) => {\r\n                                                    if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                        repetido = true;\r\n                                                    }\r\n                                                });\r\n                                                //encontrar posición del valor\r\n                                                if (!repetido) {\r\n                                                    foundit.push(element.slice(3, -3).split(':')[1])\r\n                                                    let nombreDelCampo = element.slice(3, -3).split(':')[1];\r\n                                                    let subNombreDelCampo = element.slice(3, -3).split(':')[1];\r\n                                                    let subContador = 1;\r\n                                                    let cadenaArray = '';\r\n                                                    archivoJson[posicionArrayCampos].valor.map((campos, ind) => {\r\n                                                        console.log(segundaFrase.replace(/ /g, ''))\r\n                                                        console.log(campos.nombre)\r\n                                                        console.log(nombreDelCampo)\r\n                                                        if (subNombreDelCampo === campos.nombre) {\r\n                                                            cadenaArray = cadenaArray + TipoTextoHtml({ found: element, texto: segundaFrase.replace(/ /g, ''), json: archivoJson[posicionArrayCampos].valor[ind] })[1] + ', '\r\n                                                            contador.push(ind);\r\n                                                            console.log(cadenaArray)\r\n                                                            subNombreDelCampo = nombreDelCampo + \"_\" + subContador;\r\n                                                            subContador = subContador + 1;\r\n                                                            //console.log(nombreDelCampo)\r\n                                                        }\r\n\r\n                                                    });\r\n                                                    console.log(\"parrafoHtml entra\")\r\n                                                    console.log(segundaFrase)\r\n                                                    let textoSinY = TipoTextoHtml({ found: segundaFrase, texto: parrafoHtml[1] ? parrafoHtml[1] : value, json: { tipo: \"text\", nombre: \"\", orden: \"1\", valor: cadenaArray } })\r\n                                                    parrafoHtml = textoSinY\r\n                                                    console.log(\"parrafoHtml\")\r\n                                                    console.log(parrafoHtml);\r\n\r\n                                                }\r\n                                            }\r\n                                        });\r\n                                    } else if (found.length > 1) {\r\n                                        console.log(\"FoundLength > 1\")\r\n                                        let parrafo = value;\r\n                                        let parrafoYYY = '';\r\n                                        let tempParrafo = [];\r\n                                        let repetido = false;\r\n                                        let posicionArrayCampos = 0;\r\n\r\n                                        if (parrafo != '') {\r\n                                            //Averiguar el json de YYY\r\n                                            archivoJson.map((item, ind) => {\r\n                                                if (name.slice(3, -3).split(':')[0] === item.nombre) {\r\n                                                    posicionArrayCampos = ind;\r\n                                                }\r\n                                            });\r\n                                            //verificar que no se repite un campo mas de dos veces                                            \r\n                                            if (!repetido) {\r\n                                                let subCadenaArray = segundaFrase;\r\n                                                let contadorFinal = 0;\r\n                                                let subContador = 0;\r\n                                                let cadenaArray = '';\r\n                                                archivoJson[posicionArrayCampos].valor.map((campos, ind) => {\r\n                                                    foundit.push(campos.nombre)\r\n                                                    let nombreDelCampo = campos.nombre;\r\n                                                    let subNombreDelCampo = campos.nombre;\r\n                                                    found.map((campoBase, index) => {\r\n                                                        //verificar que no se repite un campo mas de dos veces\r\n                                                        foundit.map((campo) => {\r\n                                                            if (campoBase.slice(3, -3).split(':')[1] === campo) {\r\n                                                                repetido = true;\r\n                                                            }\r\n                                                        });\r\n                                                        //\r\n                                                        if (subContador === 0) {\r\n                                                            if (subNombreDelCampo === campoBase.slice(3, -3).split(':')[1]) {\r\n                                                                contadorFinal = contadorFinal + 1;\r\n                                                                subCadenaArray = TipoTextoHtml({ found: campoBase, texto: subCadenaArray, json: archivoJson[posicionArrayCampos].valor[ind] })[1]\r\n                                                                console.log(\"subCadenaArray = 0\")\r\n                                                                console.log(subCadenaArray)\r\n                                                            }\r\n                                                        } else {\r\n                                                            let nombreNuevo = campoBase.slice(3, -3).split(':')[1] + \"_\" + subContador;\r\n                                                            console.log(\"nombres >1\")\r\n                                                            console.log(nombreNuevo)\r\n                                                            console.log(subNombreDelCampo)\r\n                                                            if (subNombreDelCampo === nombreNuevo) {\r\n                                                                contadorFinal = contadorFinal + 1;\r\n                                                                subCadenaArray = TipoTextoHtml({ found: campoBase, texto: subCadenaArray, json: archivoJson[posicionArrayCampos].valor[ind] })[1]\r\n                                                                console.log(\"subCadenaArray != 0\")\r\n                                                                console.log(subCadenaArray)\r\n                                                            }\r\n                                                        }\r\n                                                        console.log(\"ContadorFinal === found.length\")\r\n                                                        console.log(contadorFinal)\r\n                                                        console.log(found.length)\r\n                                                        if (contadorFinal === found.length) {\r\n                                                            cadenaArray = cadenaArray + subCadenaArray\r\n                                                            console.log(\"cadenaArray > 1\")\r\n                                                            console.log(cadenaArray)\r\n                                                            contadorFinal = 0;\r\n                                                            subContador = subContador + 1;\r\n                                                            subCadenaArray = segundaFrase\r\n                                                        }\r\n\r\n                                                    });\r\n                                                    parrafoYYY = cadenaArray\r\n                                                });\r\n                                                console.log(\"ITEMS\")\r\n                                                console.log(parrafo.replace(segundaFrase, parrafoYYY))\r\n                                                console.log(segundaFrase)\r\n                                                console.log(parrafoYYY)\r\n                                                console.log(parrafoHtml[1])\r\n                                                parrafo = TipoTextoHtml({ found: segundaFrase, texto: parrafoHtml[1] ? parrafoHtml[1] : value, json: { tipo: \"text\", nombre: \"\", orden: \"1\", valor: parrafoYYY } });\r\n                                                parrafoHtml = parrafo\r\n                                                console.log(parrafo)\r\n                                            }\r\n                                        }\r\n                                        if (!repetido) {\r\n                                            html.push(<ComponenteHtml\r\n                                                key={index}\r\n                                                negrilla={item.negrilla}\r\n                                                letra={item.letra}\r\n                                                italica={item.italica}\r\n                                                size={12}\r\n                                                texto={tempParrafo[0]}\r\n                                            />);\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n\r\n                                if (textXXXSegunda != '') {\r\n                                    if (parrafoRepetido != textXXXSegunda && parrafoRepetido != item.texto) {\r\n                                        html.push(<ComponenteHtml\r\n                                            key={index}\r\n                                            negrilla={item.negrilla}\r\n                                            letra={item.letra}\r\n                                            italica={item.italica}\r\n                                            size={item.size}\r\n                                            texto={textXXXSegunda + \" \"}\r\n                                        />\r\n                                        )\r\n                                    }\r\n                                    parrafoRepetido = item.texto\r\n                                } else {\r\n                                    console.log(\"No es igual\" + textXXXSegunda)\r\n                                    if (parrafoRepetido != item.texto) {\r\n                                        html.push(<ComponenteHtml\r\n                                            key={index}\r\n                                            negrilla={item.negrilla}\r\n                                            letra={item.letra}\r\n                                            italica={item.italica}\r\n                                            size={item.size}\r\n                                            texto={item.texto + \" \"}\r\n                                        />\r\n                                        )\r\n                                    }\r\n                                    parrafoRepetido = item.texto\r\n                                }\r\n                            }\r\n\r\n                            if (primeraFrase) {\r\n                                let found = primeraFrase.match(/(Z{3})\\w*:\\w*:\\w*(Z{3})/gm)\r\n                                console.log(\"found primeraFrase\")\r\n                                console.log(found)\r\n\r\n                                if (Array.isArray(found)) {\r\n                                    if (textXXXPrimera != '') {\r\n                                        if (found.length === 1) {\r\n                                            found.map((element, index) => {\r\n                                                let contador = [];\r\n                                                let repetido = false;\r\n                                                if (item.texto != '') {\r\n                                                    //Cuando solo venga un campo en un parrafo                                \r\n                                                    //verificar que no se repite un campo mas de dos veces\r\n                                                    foundit.map((campo) => {\r\n                                                        if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                            repetido = true;\r\n                                                        }\r\n                                                    });\r\n                                                    //encontrar posición del valor\r\n                                                    if (!repetido) {\r\n                                                        foundit.push(element.slice(3, -3).split(':')[1])\r\n                                                        archivoJson.map((item, ind) => {\r\n                                                            if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                                contador.push(ind);\r\n                                                            }\r\n                                                        });\r\n                                                        html.push(<ComponenteHtml\r\n                                                            key={index}\r\n                                                            negrilla={item.negrilla}\r\n                                                            letra={item.letra}\r\n                                                            italica={item.italica}\r\n                                                            size={item.size}\r\n                                                            texto={TipoTextoHtml({ found: element, texto: textXXXPrimera, json: archivoJson[contador[0]] })[0]}\r\n                                                        />);\r\n                                                    }\r\n                                                }\r\n                                            });\r\n                                        } else if (found.length > 1) {\r\n                                            let parrafo = textXXXPrimera;\r\n                                            let tempParrafo = [];\r\n                                            let repetido;\r\n                                            found.map((element, index) => {\r\n                                                let contador = [];\r\n                                                repetido = false;\r\n                                                if (parrafo != '') {\r\n                                                    //Cuando solo venga un campo en un parrafo\r\n                                                    //verificar que no se repite un campo mas de dos veces\r\n                                                    foundit.map((campo) => {\r\n                                                        if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                            repetido = true;\r\n                                                        }\r\n                                                    });\r\n                                                    //encontrar posición del valor\r\n                                                    if (!repetido) {\r\n                                                        foundit.push(element.slice(3, -3).split(':')[1])\r\n                                                        archivoJson.map((item, ind) => {\r\n                                                            if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                                contador.push(ind);\r\n                                                            }\r\n                                                        });\r\n                                                        tempParrafo = TipoTextoHtml({ found: element, texto: parrafo, json: archivoJson[contador[0]] });\r\n                                                        parrafo = tempParrafo[1];\r\n                                                    }\r\n                                                }\r\n                                            });\r\n                                            if (!repetido) {\r\n                                                html.push(<ComponenteHtml\r\n                                                    key={index}\r\n                                                    negrilla={item.negrilla}\r\n                                                    letra={item.letra}\r\n                                                    italica={item.italica}\r\n                                                    size={12}\r\n                                                    texto={tempParrafo[0]}\r\n                                                />);\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        //Campos ZZZ sin haber XXX\r\n                                        if (found.length === 1) {\r\n                                            found.map((element, index) => {\r\n                                                let contador = [];\r\n                                                let repetido = false;\r\n                                                if (item.texto != '') {\r\n                                                    //Cuando solo venga un campo en un parrafo                                \r\n                                                    //console.log(item.texto)\r\n                                                    //verificar que no se repite un campo mas de dos veces\r\n                                                    foundit.map((campo) => {\r\n                                                        if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                            repetido = true;\r\n                                                        }\r\n                                                    });\r\n                                                    //encontrar posición del valor\r\n                                                    if (!repetido) {\r\n                                                        foundit.push(element.slice(3, -3).split(':')[1])\r\n                                                        archivoJson.map((item, ind) => {\r\n                                                            if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                                contador.push(ind);\r\n                                                            }\r\n\r\n                                                        });\r\n                                                        let tempParra = TipoTextoHtml({ found: element, texto: parrafoHtml[1] ? parrafoHtml[1] : value, json: archivoJson[contador[0]] })\r\n                                                        parrafoHtml = tempParra\r\n                                                        console.log(\"parrafoHtml\")\r\n                                                        console.log(parrafoHtml);\r\n                                                    }\r\n                                                }\r\n                                            });\r\n                                        } else if (found.length > 1) {\r\n                                            let parrafo = value;\r\n                                            let tempParrafo = [];\r\n                                            let repetido;\r\n                                            found.map((element, index) => {\r\n                                                let contador = [];\r\n                                                repetido = false;\r\n                                                if (parrafo != '') {\r\n                                                    //Cuando solo venga un campo en un parrafo\r\n                                                    //verificar que no se repite un campo mas de dos veces\r\n                                                    foundit.map((campo) => {\r\n                                                        if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                            repetido = true;\r\n                                                        }\r\n                                                    });\r\n                                                    //encontrar posición del valor\r\n                                                    if (!repetido) {\r\n                                                        foundit.push(element.slice(3, -3).split(':')[1])\r\n                                                        archivoJson.map((item, ind) => {\r\n                                                            if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                                contador.push(ind);\r\n                                                            }\r\n                                                        });\r\n                                                        tempParrafo = TipoTextoHtml({ found: element, texto: parrafo, json: archivoJson[contador[0]] });\r\n                                                        parrafo = tempParrafo[1];\r\n                                                    }\r\n                                                }\r\n                                            });\r\n                                            if (!repetido) {\r\n                                                html.push(<ComponenteHtml\r\n                                                    key={index}\r\n                                                    negrilla={item.negrilla}\r\n                                                    letra={item.letra}\r\n                                                    italica={item.italica}\r\n                                                    size={12}\r\n                                                    texto={tempParrafo[0]}\r\n                                                />);\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        })\r\n                        //Saltar a otro parrafo, despues de analizar el presente\r\n                        if (endFoundY) {\r\n                            let parteTexto = parrafoHtml[1]\r\n                            foundY.map((element, ind) => {\r\n                                parteTexto = parteTexto.replace(element.toString(), '')\r\n                                console.log(parteTexto)\r\n                                console.log(element)\r\n                            })\r\n                            endFoundY.map((element, ind) => {\r\n                                parteTexto = parteTexto.replace(element, '')\r\n                            })\r\n                            html.push(<ComponenteHtml\r\n                                key={index}\r\n                                negrilla={item.negrilla}\r\n                                letra={item.letra}\r\n                                italica={item.italica}\r\n                                size={12}\r\n                                texto={<span style={{ background: 'yellow' }}>{\" \" + parteTexto} </span>}\r\n                            />);\r\n                            activateY = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.log(\"entra Si no encontro YYY\")\r\n                    let foundX = item.texto.match(/(X{3})\\w*:\\w*(X{3})/gm)\r\n                    console.log(\"item.texto\")\r\n                    console.log(item.texto)\r\n                    if (Array.isArray(foundX)) {\r\n                        console.log(\"XXX en texto\")\r\n                        if (foundX.length === 1) {\r\n                            foundX.map((element, index) => {\r\n                                console.log(element)\r\n                                let cantidadX;\r\n                                let generoX = \"Masculino\";\r\n                                let numeroH = 0;\r\n                                let numeroM = 0;\r\n                                archivoJson.map((item, ind) => {\r\n                                    if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                        archivoJson[ind].valor.map((subitem, subind) => {\r\n                                            if (subitem.tipo === 'inviciblesologenero') {\r\n                                                if (subitem.valor === 'Masculino') {\r\n                                                    numeroH = numeroH + 1;\r\n                                                } else if (subitem.valor === 'Femenino') {\r\n                                                    numeroM = numeroM + 1;\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                        if (numeroH > numeroM) {\r\n                                            generoX = \"Masculino\"\r\n                                        } else if (numeroM > 0) {\r\n                                            generoX = \"Femenino\"\r\n                                        }\r\n                                        cantidadX = item.cantidad;\r\n                                    }\r\n                                });\r\n                                XXXenY = CambiarVocabulario({ found: element, texto: item.texto, genero: generoX, cantidad: cantidadX })\r\n                                console.log(XXXenY)\r\n                            })\r\n                        } else if (foundX.length > 1) {\r\n                            let parrafo = item.texto;\r\n                            console.log(\"item.texto en XXX s\")\r\n                            console.log(item.texto)\r\n                            let tempParrafo = '';\r\n                            foundX.map((element, index) => {\r\n                                let cantidadX;\r\n                                let generoX = \"Masculino\";\r\n                                let numeroH = 0;\r\n                                let numeroM = 0;\r\n                                archivoJson.map((item, ind) => {\r\n                                    if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                        archivoJson[ind].valor.map((subitem, subind) => {\r\n                                            if (subitem.tipo === 'inviciblesologenero') {\r\n                                                if (subitem.valor === 'Masculino') {\r\n                                                    numeroH = numeroH + 1;\r\n                                                } else if (subitem.valor === 'Femenino') {\r\n                                                    numeroM = numeroM + 1;\r\n                                                }\r\n                                            }\r\n                                        })\r\n                                        if (numeroH > numeroM) {\r\n                                            generoX = \"Masculino\"\r\n                                        } else if (numeroM > 0) {\r\n                                            generoX = \"Femenino\"\r\n                                        }\r\n                                        cantidadX = item.cantidad;\r\n                                    }\r\n                                });\r\n                                tempParrafo = CambiarVocabulario({ found: element, texto: parrafo, genero: generoX, cantidad: cantidadX })\r\n                                parrafo = tempParrafo;\r\n                            })\r\n                            XXXenY = parrafo;\r\n                            console.log(XXXenY)\r\n                        }\r\n                    }\r\n\r\n                    //Hallar XXX, ZZZ en parrafos donde no se encuentres YYY\r\n\r\n                    let texto = XXXenY != \"\" ? XXXenY : item.texto\r\n                    let found = texto.match(/(Z{3})\\w*:\\w*:\\w*(Z{3})/gm)\r\n                    if (Array.isArray(found)) {\r\n                        if (XXXenY != '') {\r\n                            if (found.length === 1) {\r\n                                found.map((element, index) => {\r\n                                    let contador = [];\r\n                                    let repetido = false;\r\n                                    if (item.texto != '') {\r\n                                        //Cuando solo venga un campo en un parrafo                                \r\n                                        //verificar que no se repite un campo mas de dos veces\r\n                                        foundit.map((campo) => {\r\n                                            if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                repetido = true;\r\n                                            }\r\n                                        });\r\n                                        //encontrar posición del valor\r\n                                        if (!repetido) {\r\n                                            foundit.push(element.slice(3, -3).split(':')[1])\r\n                                            archivoJson.map((item, ind) => {\r\n                                                if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                    contador.push(ind);\r\n                                                }\r\n                                            });\r\n                                            html.push(<ComponenteHtml\r\n                                                key={index}\r\n                                                negrilla={item.negrilla}\r\n                                                letra={item.letra}\r\n                                                italica={item.italica}\r\n                                                size={item.size}\r\n                                                texto={TipoTextoHtml({ found: element, texto: texto, json: archivoJson[contador[0]] })[0]}\r\n                                            />);\r\n                                        }\r\n                                    }\r\n                                });\r\n                            } else if (found.length > 1) {\r\n                                let parrafo = texto;\r\n                                let tempParrafo = [];\r\n                                let repetido;\r\n                                found.map((element, index) => {\r\n                                    let contador = [];\r\n                                    repetido = false;\r\n                                    if (parrafo != '') {\r\n                                        //Cuando solo venga un campo en un parrafo\r\n                                        //verificar que no se repite un campo mas de dos veces\r\n                                        foundit.map((campo) => {\r\n                                            if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                repetido = true;\r\n                                            }\r\n                                        });\r\n                                        //encontrar posición del valor\r\n                                        if (!repetido) {\r\n                                            foundit.push(element.slice(3, -3).split(':')[1])\r\n                                            archivoJson.map((item, ind) => {\r\n                                                if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                    contador.push(ind);\r\n                                                }\r\n                                            });\r\n                                            tempParrafo = TipoTextoHtml({ found: element, texto: parrafo, json: archivoJson[contador[0]] });\r\n                                            parrafo = tempParrafo[1];\r\n                                        }\r\n                                    }\r\n                                });\r\n                                if (!repetido) {\r\n                                    html.push(<ComponenteHtml\r\n                                        key={index}\r\n                                        negrilla={item.negrilla}\r\n                                        letra={item.letra}\r\n                                        italica={item.italica}\r\n                                        size={12}\r\n                                        texto={tempParrafo[0]}\r\n                                    />);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            if (found.length === 1) {\r\n                                found.map((element, index) => {\r\n                                    let contador = [];\r\n                                    let repetido = false;\r\n                                    if (item.texto != '') {\r\n                                        //Cuando solo venga un campo en un parrafo                                \r\n                                        //console.log(item.texto)\r\n                                        //verificar que no se repite un campo mas de dos veces\r\n                                        foundit.map((campo) => {\r\n                                            if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                repetido = true;\r\n                                            }\r\n                                        });\r\n                                        //encontrar posición del valor\r\n                                        if (!repetido) {\r\n                                            foundit.push(element.slice(3, -3).split(':')[1])\r\n                                            archivoJson.map((item, ind) => {\r\n                                                if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                    contador.push(ind);\r\n                                                }\r\n\r\n                                            });\r\n                                            html.push(<ComponenteHtml\r\n                                                key={index}\r\n                                                negrilla={item.negrilla}\r\n                                                letra={item.letra}\r\n                                                italica={item.italica}\r\n                                                size={item.size}\r\n                                                texto={TipoTextoHtml({ found: element, texto: item.texto, json: archivoJson[contador[0]] })[0]}\r\n                                            />);\r\n                                        }\r\n                                    }\r\n                                });\r\n                            } else if (found.length > 1) {\r\n                                let parrafo = item.texto;\r\n                                let tempParrafo = [];\r\n                                let repetido;\r\n                                found.map((element, index) => {\r\n                                    let contador = [];\r\n                                    repetido = false;\r\n                                    if (parrafo != '') {\r\n                                        //Cuando solo venga un campo en un parrafo\r\n                                        //verificar que no se repite un campo mas de dos veces\r\n                                        foundit.map((campo) => {\r\n                                            if (element.slice(3, -3).split(':')[1] === campo) {\r\n                                                repetido = true;\r\n                                            }\r\n                                        });\r\n                                        //encontrar posición del valor\r\n                                        if (!repetido) {\r\n                                            foundit.push(element.slice(3, -3).split(':')[1])\r\n                                            archivoJson.map((item, ind) => {\r\n                                                if (element.slice(3, -3).split(':')[1] === item.nombre) {\r\n                                                    contador.push(ind);\r\n                                                }\r\n                                            });\r\n                                            tempParrafo = TipoTextoHtml({ found: element, texto: parrafo, json: archivoJson[contador[0]] });\r\n                                            parrafo = tempParrafo[1];\r\n                                        }\r\n                                    }\r\n                                });\r\n                                if (!repetido) {\r\n                                    html.push(<ComponenteHtml\r\n                                        key={index}\r\n                                        negrilla={item.negrilla}\r\n                                        letra={item.letra}\r\n                                        italica={item.italica}\r\n                                        size={12}\r\n                                        texto={tempParrafo[0]}\r\n                                    />);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                    } else {\r\n\r\n                        if (texto != '') {\r\n                            if (parrafoRepetido != texto && parrafoRepetido != item.texto) {\r\n                                html.push(<ComponenteHtml\r\n                                    key={index}\r\n                                    negrilla={item.negrilla}\r\n                                    letra={item.letra}\r\n                                    italica={item.italica}\r\n                                    size={item.size}\r\n                                    texto={texto + \" \"}\r\n                                />\r\n                                )\r\n                            }\r\n                            parrafoRepetido = item.texto\r\n                        } else {\r\n                            console.log(\"No es igual\" + texto)\r\n                            if (parrafoRepetido != item.texto) {\r\n                                html.push(<ComponenteHtml\r\n                                    key={index}\r\n                                    negrilla={item.negrilla}\r\n                                    letra={item.letra}\r\n                                    italica={item.italica}\r\n                                    size={item.size}\r\n                                    texto={item.texto + \" \"}\r\n                                />\r\n                                )\r\n                            }\r\n                            parrafoRepetido = item.texto\r\n                        }\r\n                    }\r\n                }\r\n                // Proceso para reescribir campos ZZZ--ZZZ\r\n\r\n\r\n            });\r\n            return html;\r\n        })\r\n        setDatoshtml(data)\r\n        setSuccess(true);\r\n        setLoading(false);\r\n    }, [datos])\r\n\r\n    useEffect(() => {\r\n        //console.log(\"Recibe Campos\");\r\n        setSuccess(false);\r\n        setLoading(true);\r\n        //Axios\r\n        let config = {\r\n            method: 'get',\r\n            url: process.env.REACT_APP_URL_API + '/api/documentosAgiles/' + seleccion + '/showWithFile',\r\n            headers: { Authorization: `Bearer ${auth.token}`, \"Content-Type\": \"application/json\" },\r\n        };\r\n        const fechData = async () => {\r\n            const result = await axios(config).then((response) => {\r\n                let fields = JSON.parse(response.data.json);\r\n                setCantidad(fields.cantidad);\r\n                setGenero(fields.genero);\r\n                //console.log(response)\r\n                onFileUpload(response.data.archivoJson, fields.archivoJson);\r\n            });\r\n        }\r\n        fechData();\r\n    }, [])\r\n\r\n    const onFileUpload = (archivo, json) => {\r\n        // Create an object of formData \r\n        if (archivo) {\r\n            setArchivoJson(json);\r\n            loaddata(archivo);\r\n        }\r\n    }\r\n\r\n    const loaddata = (archivo) => {\r\n        let arraydata = archivo.blocks.map((item) => {\r\n            let align = \"\";\r\n            let hijos = [];\r\n            let indices = [];\r\n            let intervalos = [];\r\n            let temp = 0;\r\n            if (item.data[\"text-align\"]) {\r\n                align = item.data[\"text-align\"];\r\n            }\r\n            if (item.inlineStyleRanges.length > 0) {\r\n                item.inlineStyleRanges.forEach((indice) => {\r\n                    if (indices.indexOf(indice.offset) === -1) {\r\n                        indices.push(indice.offset);\r\n                    }\r\n                    if (indices.indexOf(indice.offset + indice.length) === -1) {\r\n                        indices.push(indice.offset + indice.length);\r\n                    }\r\n                })\r\n                indices.push(item.text.length);\r\n                indices.sort((a, b) => a - b);\r\n                indices.forEach((element) => {\r\n                    intervalos.push({ text: item.text.slice(temp, element), inicio: temp, fin: element });\r\n                    temp = element;\r\n                });\r\n                intervalos.forEach((element) => {\r\n                    let negrillaHijo = false;\r\n                    let italicaHijo = false;\r\n                    item.inlineStyleRanges.forEach((item) => {\r\n                        if (element.inicio >= item.offset && element.fin <= (item.offset + item.length)) {\r\n                            switch (item.style) {\r\n                                case \"BOLD\": negrillaHijo = true; break;\r\n                                case \"ITALIC\": italicaHijo = true; break;\r\n                            }\r\n                        }\r\n                    })\r\n                    hijos.push({\r\n                        letra: \"Arial\",\r\n                        negrilla: negrillaHijo,\r\n                        italica: italicaHijo,\r\n                        size: \"12\",\r\n                        texto: element.text,\r\n                    })\r\n                })\r\n            } else {\r\n                hijos.push({\r\n                    letra: \"Arial\",\r\n                    negrilla: false,\r\n                    italica: false,\r\n                    size: \"12\",\r\n                    texto: item.text,\r\n                })\r\n            }\r\n            return { align, hijos }\r\n        })\r\n        //console.log(\"Prueba\")\r\n        setDatos(arraydata)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Heading\r\n                title=\"Previsualización documento\"\r\n                textAlign=\"center\"\r\n                category={<span>Se previsualiza el documento para verificar los campos</span>}\r\n            />\r\n            <GridContainer>\r\n                <GridItem md={8} style={{ margin: 'auto' }}>\r\n                    <Card>\r\n                        <CardHeader color=\"primary\" text>\r\n                            <CardText className={classes.cardText} color=\"primary\">\r\n                                <h4 className={classes.colorWhite}> Previzualicación del documento </h4>\r\n                            </CardText>\r\n                        </CardHeader>\r\n\r\n                        <CardBody>\r\n                            <div style={{ textAlign: 'center', marginBottom: '10px' }}>\r\n                                {loading && <CircularProgress className={classes2.progress} size={100} color=\"primary\" />}\r\n                                {success ? <Alert severity=\"success\">Se ha realizado la previsualización exitosamente</Alert> : <p></p>}\r\n                            </div>\r\n                            {datoshtml.map((item, index) => {\r\n                                let align;\r\n                                if (datos[index].align === \"both\") {\r\n                                    align = \"justify\";\r\n                                } else {\r\n                                    align = datos[index].align;\r\n                                }\r\n                                return (<p style={{ textAlign: align }} key={index}><b>{item}</b></p>\r\n                                )\r\n                            })}\r\n                        </CardBody>\r\n                    </Card>\r\n                </GridItem>\r\n            </GridContainer>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":";;;+CACA,qJAAAA,mBAAA,YAAAA,oBAAA,WAAAC,CAAA,SAAAC,CAAA,EAAAD,CAAA,OAAAE,CAAA,GAAAC,MAAA,CAAAC,SAAA,EAAAC,CAAA,GAAAH,CAAA,CAAAI,cAAA,EAAAC,CAAA,GAAAJ,MAAA,CAAAK,cAAA,cAAAP,CAAA,EAAAD,CAAA,EAAAE,CAAA,IAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,CAAAO,KAAA,KAAAC,CAAA,wBAAAC,MAAA,GAAAA,MAAA,OAAAC,CAAA,GAAAF,CAAA,CAAAG,QAAA,kBAAAC,CAAA,GAAAJ,CAAA,CAAAK,aAAA,uBAAAC,CAAA,GAAAN,CAAA,CAAAO,WAAA,8BAAAC,OAAAjB,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAC,MAAA,CAAAK,cAAA,CAAAP,CAAA,EAAAD,CAAA,IAAAS,KAAA,EAAAP,CAAA,EAAAiB,UAAA,MAAAC,YAAA,MAAAC,QAAA,SAAApB,CAAA,CAAAD,CAAA,WAAAkB,MAAA,mBAAAjB,CAAA,IAAAiB,MAAA,YAAAA,OAAAjB,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAD,CAAA,CAAAD,CAAA,IAAAE,CAAA,gBAAAoB,KAAArB,CAAA,EAAAD,CAAA,EAAAE,CAAA,EAAAG,CAAA,QAAAK,CAAA,GAAAV,CAAA,IAAAA,CAAA,CAAAI,SAAA,YAAAmB,SAAA,GAAAvB,CAAA,GAAAuB,SAAA,EAAAX,CAAA,GAAAT,MAAA,CAAAqB,MAAA,CAAAd,CAAA,CAAAN,SAAA,GAAAU,CAAA,OAAAW,OAAA,CAAApB,CAAA,gBAAAE,CAAA,CAAAK,CAAA,eAAAH,KAAA,EAAAiB,gBAAA,CAAAzB,CAAA,EAAAC,CAAA,EAAAY,CAAA,MAAAF,CAAA,aAAAe,SAAA1B,CAAA,EAAAD,CAAA,EAAAE,CAAA,mBAAA0B,IAAA,YAAAC,GAAA,EAAA5B,CAAA,CAAA6B,IAAA,CAAA9B,CAAA,EAAAE,CAAA,cAAAD,CAAA,aAAA2B,IAAA,WAAAC,GAAA,EAAA5B,CAAA,QAAAD,CAAA,CAAAsB,IAAA,GAAAA,IAAA,MAAAS,CAAA,qBAAAC,CAAA,qBAAAC,CAAA,gBAAAC,CAAA,gBAAAC,CAAA,gBAAAZ,UAAA,cAAAa,kBAAA,cAAAC,2BAAA,SAAAC,CAAA,OAAApB,MAAA,CAAAoB,CAAA,EAAA1B,CAAA,qCAAA2B,CAAA,GAAApC,MAAA,CAAAqC,cAAA,EAAAC,CAAA,GAAAF,CAAA,IAAAA,CAAA,CAAAA,CAAA,CAAAG,MAAA,QAAAD,CAAA,IAAAA,CAAA,KAAAvC,CAAA,IAAAG,CAAA,CAAAyB,IAAA,CAAAW,CAAA,EAAA7B,CAAA,MAAA0B,CAAA,GAAAG,CAAA,OAAAE,CAAA,GAAAN,0BAAA,CAAAjC,SAAA,GAAAmB,SAAA,CAAAnB,SAAA,GAAAD,MAAA,CAAAqB,MAAA,CAAAc,CAAA,YAAAM,sBAAA3C,CAAA,gCAAA4C,OAAA,WAAA7C,CAAA,IAAAkB,MAAA,CAAAjB,CAAA,EAAAD,CAAA,YAAAC,CAAA,gBAAA6C,OAAA,CAAA9C,CAAA,EAAAC,CAAA,sBAAA8C,cAAA9C,CAAA,EAAAD,CAAA,aAAAgD,OAAA9C,CAAA,EAAAK,CAAA,EAAAG,CAAA,EAAAE,CAAA,QAAAE,CAAA,GAAAa,QAAA,CAAA1B,CAAA,CAAAC,CAAA,GAAAD,CAAA,EAAAM,CAAA,mBAAAO,CAAA,CAAAc,IAAA,QAAAZ,CAAA,GAAAF,CAAA,CAAAe,GAAA,EAAAE,CAAA,GAAAf,CAAA,CAAAP,KAAA,SAAAsB,CAAA,uBAAAA,CAAA,IAAA1B,CAAA,CAAAyB,IAAA,CAAAC,CAAA,eAAA/B,CAAA,CAAAiD,OAAA,CAAAlB,CAAA,CAAAmB,OAAA,EAAAC,IAAA,WAAAlD,CAAA,IAAA+C,MAAA,SAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,gBAAAX,CAAA,IAAA+C,MAAA,UAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,QAAAZ,CAAA,CAAAiD,OAAA,CAAAlB,CAAA,EAAAoB,IAAA,WAAAlD,CAAA,IAAAe,CAAA,CAAAP,KAAA,GAAAR,CAAA,EAAAS,CAAA,CAAAM,CAAA,gBAAAf,CAAA,WAAA+C,MAAA,UAAA/C,CAAA,EAAAS,CAAA,EAAAE,CAAA,SAAAA,CAAA,CAAAE,CAAA,CAAAe,GAAA,SAAA3B,CAAA,EAAAK,CAAA,oBAAAE,KAAA,WAAAA,MAAAR,CAAA,EAAAI,CAAA,aAAA+C,2BAAA,eAAApD,CAAA,WAAAA,CAAA,EAAAE,CAAA,IAAA8C,MAAA,CAAA/C,CAAA,EAAAI,CAAA,EAAAL,CAAA,EAAAE,CAAA,gBAAAA,CAAA,GAAAA,CAAA,GAAAA,CAAA,CAAAiD,IAAA,CAAAC,0BAAA,EAAAA,0BAAA,IAAAA,0BAAA,qBAAA1B,iBAAA1B,CAAA,EAAAE,CAAA,EAAAG,CAAA,QAAAE,CAAA,GAAAwB,CAAA,mBAAArB,CAAA,EAAAE,CAAA,QAAAL,CAAA,KAAA0B,CAAA,QAAAoB,KAAA,sCAAA9C,CAAA,KAAA2B,CAAA,oBAAAxB,CAAA,QAAAE,CAAA,WAAAH,KAAA,EAAAR,CAAA,EAAAqD,IAAA,eAAAjD,CAAA,CAAAkD,MAAA,GAAA7C,CAAA,EAAAL,CAAA,CAAAwB,GAAA,GAAAjB,CAAA,UAAAE,CAAA,GAAAT,CAAA,CAAAmD,QAAA,MAAA1C,CAAA,QAAAE,CAAA,GAAAyC,mBAAA,CAAA3C,CAAA,EAAAT,CAAA,OAAAW,CAAA,QAAAA,CAAA,KAAAmB,CAAA,mBAAAnB,CAAA,qBAAAX,CAAA,CAAAkD,MAAA,EAAAlD,CAAA,CAAAqD,IAAA,GAAArD,CAAA,CAAAsD,KAAA,GAAAtD,CAAA,CAAAwB,GAAA,sBAAAxB,CAAA,CAAAkD,MAAA,QAAAhD,CAAA,KAAAwB,CAAA,QAAAxB,CAAA,GAAA2B,CAAA,EAAA7B,CAAA,CAAAwB,GAAA,EAAAxB,CAAA,CAAAuD,iBAAA,CAAAvD,CAAA,CAAAwB,GAAA,uBAAAxB,CAAA,CAAAkD,MAAA,IAAAlD,CAAA,CAAAwD,MAAA,WAAAxD,CAAA,CAAAwB,GAAA,GAAAtB,CAAA,GAAA0B,CAAA,MAAAK,CAAA,GAAAX,QAAA,CAAA3B,CAAA,EAAAE,CAAA,EAAAG,CAAA,oBAAAiC,CAAA,CAAAV,IAAA,QAAArB,CAAA,GAAAF,CAAA,CAAAiD,IAAA,GAAApB,CAAA,GAAAF,CAAA,EAAAM,CAAA,CAAAT,GAAA,KAAAM,CAAA,qBAAA1B,KAAA,EAAA6B,CAAA,CAAAT,GAAA,EAAAyB,IAAA,EAAAjD,CAAA,CAAAiD,IAAA,kBAAAhB,CAAA,CAAAV,IAAA,KAAArB,CAAA,GAAA2B,CAAA,EAAA7B,CAAA,CAAAkD,MAAA,YAAAlD,CAAA,CAAAwB,GAAA,GAAAS,CAAA,CAAAT,GAAA,mBAAA4B,oBAAAzD,CAAA,EAAAE,CAAA,QAAAG,CAAA,GAAAH,CAAA,CAAAqD,MAAA,EAAAhD,CAAA,GAAAP,CAAA,CAAAa,QAAA,CAAAR,CAAA,OAAAE,CAAA,KAAAN,CAAA,SAAAC,CAAA,CAAAsD,QAAA,qBAAAnD,CAAA,IAAAL,CAAA,CAAAa,QAAA,eAAAX,CAAA,CAAAqD,MAAA,aAAArD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,EAAAwD,mBAAA,CAAAzD,CAAA,EAAAE,CAAA,eAAAA,CAAA,CAAAqD,MAAA,kBAAAlD,CAAA,KAAAH,CAAA,CAAAqD,MAAA,YAAArD,CAAA,CAAA2B,GAAA,OAAAiC,SAAA,uCAAAzD,CAAA,iBAAA8B,CAAA,MAAAzB,CAAA,GAAAiB,QAAA,CAAApB,CAAA,EAAAP,CAAA,CAAAa,QAAA,EAAAX,CAAA,CAAA2B,GAAA,mBAAAnB,CAAA,CAAAkB,IAAA,SAAA1B,CAAA,CAAAqD,MAAA,YAAArD,CAAA,CAAA2B,GAAA,GAAAnB,CAAA,CAAAmB,GAAA,EAAA3B,CAAA,CAAAsD,QAAA,SAAArB,CAAA,MAAAvB,CAAA,GAAAF,CAAA,CAAAmB,GAAA,SAAAjB,CAAA,GAAAA,CAAA,CAAA0C,IAAA,IAAApD,CAAA,CAAAF,CAAA,CAAA+D,UAAA,IAAAnD,CAAA,CAAAH,KAAA,EAAAP,CAAA,CAAA8D,IAAA,GAAAhE,CAAA,CAAAiE,OAAA,eAAA/D,CAAA,CAAAqD,MAAA,KAAArD,CAAA,CAAAqD,MAAA,WAAArD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,GAAAC,CAAA,CAAAsD,QAAA,SAAArB,CAAA,IAAAvB,CAAA,IAAAV,CAAA,CAAAqD,MAAA,YAAArD,CAAA,CAAA2B,GAAA,OAAAiC,SAAA,sCAAA5D,CAAA,CAAAsD,QAAA,SAAArB,CAAA,cAAA+B,aAAAjE,CAAA,QAAAD,CAAA,KAAAmE,MAAA,EAAAlE,CAAA,YAAAA,CAAA,KAAAD,CAAA,CAAAoE,QAAA,GAAAnE,CAAA,WAAAA,CAAA,KAAAD,CAAA,CAAAqE,UAAA,GAAApE,CAAA,KAAAD,CAAA,CAAAsE,QAAA,GAAArE,CAAA,WAAAsE,UAAA,CAAAC,IAAA,CAAAxE,CAAA,cAAAyE,cAAAxE,CAAA,QAAAD,CAAA,GAAAC,CAAA,CAAAyE,UAAA,QAAA1E,CAAA,CAAA4B,IAAA,oBAAA5B,CAAA,CAAA6B,GAAA,EAAA5B,CAAA,CAAAyE,UAAA,GAAA1E,CAAA,aAAAyB,QAAAxB,CAAA,SAAAsE,UAAA,MAAAJ,MAAA,aAAAlE,CAAA,CAAA4C,OAAA,CAAAqB,YAAA,cAAAS,KAAA,iBAAAjC,OAAA1C,CAAA,QAAAA,CAAA,WAAAA,CAAA,QAAAE,CAAA,GAAAF,CAAA,CAAAY,CAAA,OAAAV,CAAA,SAAAA,CAAA,CAAA4B,IAAA,CAAA9B,CAAA,4BAAAA,CAAA,CAAAgE,IAAA,SAAAhE,CAAA,OAAA4E,KAAA,CAAA5E,CAAA,CAAA6E,MAAA,SAAAtE,CAAA,OAAAG,CAAA,YAAAsD,KAAA,aAAAzD,CAAA,GAAAP,CAAA,CAAA6E,MAAA,OAAAxE,CAAA,CAAAyB,IAAA,CAAA9B,CAAA,EAAAO,CAAA,UAAAyD,IAAA,CAAAvD,KAAA,GAAAT,CAAA,CAAAO,CAAA,GAAAyD,IAAA,CAAAV,IAAA,OAAAU,IAAA,SAAAA,IAAA,CAAAvD,KAAA,GAAAR,CAAA,EAAA+D,IAAA,CAAAV,IAAA,OAAAU,IAAA,YAAAtD,CAAA,CAAAsD,IAAA,GAAAtD,CAAA,gBAAAoD,SAAA,QAAA9D,CAAA,iCAAAoC,iBAAA,CAAAhC,SAAA,GAAAiC,0BAAA,EAAA9B,CAAA,CAAAoC,CAAA,mBAAAlC,KAAA,EAAA4B,0BAAA,EAAAjB,YAAA,SAAAb,CAAA,CAAA8B,0BAAA,mBAAA5B,KAAA,EAAA2B,iBAAA,EAAAhB,YAAA,SAAAgB,iBAAA,CAAA0C,WAAA,GAAA5D,MAAA,CAAAmB,0BAAA,EAAArB,CAAA,wBAAAhB,CAAA,CAAA+E,mBAAA,aAAA9E,CAAA,QAAAD,CAAA,wBAAAC,CAAA,IAAAA,CAAA,CAAA+E,WAAA,WAAAhF,CAAA,KAAAA,CAAA,KAAAoC,iBAAA,6BAAApC,CAAA,CAAA8E,WAAA,IAAA9E,CAAA,CAAAiF,IAAA,OAAAjF,CAAA,CAAAkF,IAAA,aAAAjF,CAAA,WAAAE,MAAA,CAAAgF,cAAA,GAAAhF,MAAA,CAAAgF,cAAA,CAAAlF,CAAA,EAAAoC,0BAAA,KAAApC,CAAA,CAAAmF,SAAA,GAAA/C,0BAAA,EAAAnB,MAAA,CAAAjB,CAAA,EAAAe,CAAA,yBAAAf,CAAA,CAAAG,SAAA,GAAAD,MAAA,CAAAqB,MAAA,CAAAmB,CAAA,GAAA1C,CAAA,KAAAD,CAAA,CAAAqF,KAAA,aAAApF,CAAA,aAAAiD,OAAA,EAAAjD,CAAA,OAAA2C,qBAAA,CAAAG,aAAA,CAAA3C,SAAA,GAAAc,MAAA,CAAA6B,aAAA,CAAA3C,SAAA,EAAAU,CAAA,iCAAAd,CAAA,CAAA+C,aAAA,GAAAA,aAAA,EAAA/C,CAAA,CAAAsF,KAAA,aAAArF,CAAA,EAAAC,CAAA,EAAAG,CAAA,EAAAE,CAAA,EAAAG,CAAA,eAAAA,CAAA,KAAAA,CAAA,GAAA6E,OAAA,OAAA3E,CAAA,OAAAmC,aAAA,CAAAzB,IAAA,CAAArB,CAAA,EAAAC,CAAA,EAAAG,CAAA,EAAAE,CAAA,GAAAG,CAAA,UAAAV,CAAA,CAAA+E,mBAAA,CAAA7E,CAAA,IAAAU,CAAA,GAAAA,CAAA,CAAAoD,IAAA,GAAAb,IAAA,WAAAlD,CAAA,WAAAA,CAAA,CAAAqD,IAAA,GAAArD,CAAA,CAAAQ,KAAA,GAAAG,CAAA,CAAAoD,IAAA,WAAApB,qBAAA,CAAAD,CAAA,GAAAzB,MAAA,CAAAyB,CAAA,EAAA3B,CAAA,gBAAAE,MAAA,CAAAyB,CAAA,EAAA/B,CAAA,iCAAAM,MAAA,CAAAyB,CAAA,6DAAA3C,CAAA,CAAAwF,IAAA,aAAAvF,CAAA,QAAAD,CAAA,GAAAG,MAAA,CAAAF,CAAA,GAAAC,CAAA,gBAAAG,CAAA,IAAAL,CAAA,EAAAE,CAAA,CAAAsE,IAAA,CAAAnE,CAAA,UAAAH,CAAA,CAAAuF,OAAA,aAAAzB,KAAA,WAAA9D,CAAA,CAAA2E,MAAA,SAAA5E,CAAA,GAAAC,CAAA,CAAAwF,GAAA,QAAAzF,CAAA,IAAAD,CAAA,SAAAgE,IAAA,CAAAvD,KAAA,GAAAR,CAAA,EAAA+D,IAAA,CAAAV,IAAA,OAAAU,IAAA,WAAAA,IAAA,CAAAV,IAAA,OAAAU,IAAA,QAAAhE,CAAA,CAAA0C,MAAA,GAAAA,MAAA,EAAAjB,OAAA,CAAArB,SAAA,KAAA4E,WAAA,EAAAvD,OAAA,EAAAkD,KAAA,WAAAA,MAAA3E,CAAA,aAAA2F,IAAA,WAAA3B,IAAA,WAAAN,IAAA,QAAAC,KAAA,GAAA1D,CAAA,OAAAqD,IAAA,YAAAE,QAAA,cAAAD,MAAA,gBAAA1B,GAAA,GAAA5B,CAAA,OAAAsE,UAAA,CAAA1B,OAAA,CAAA4B,aAAA,IAAAzE,CAAA,WAAAE,CAAA,kBAAAA,CAAA,CAAA0F,MAAA,OAAAvF,CAAA,CAAAyB,IAAA,OAAA5B,CAAA,MAAA0E,KAAA,EAAA1E,CAAA,CAAA2F,KAAA,cAAA3F,CAAA,IAAAD,CAAA,MAAA6F,IAAA,WAAAA,KAAA,SAAAxC,IAAA,WAAArD,CAAA,QAAAsE,UAAA,IAAAG,UAAA,kBAAAzE,CAAA,CAAA2B,IAAA,QAAA3B,CAAA,CAAA4B,GAAA,cAAAkE,IAAA,KAAAnC,iBAAA,WAAAA,kBAAA5D,CAAA,aAAAsD,IAAA,QAAAtD,CAAA,MAAAE,CAAA,kBAAA8F,OAAA3F,CAAA,EAAAE,CAAA,WAAAK,CAAA,CAAAgB,IAAA,YAAAhB,CAAA,CAAAiB,GAAA,GAAA7B,CAAA,EAAAE,CAAA,CAAA8D,IAAA,GAAA3D,CAAA,EAAAE,CAAA,KAAAL,CAAA,CAAAqD,MAAA,WAAArD,CAAA,CAAA2B,GAAA,GAAA5B,CAAA,KAAAM,CAAA,aAAAA,CAAA,QAAAgE,UAAA,CAAAM,MAAA,MAAAtE,CAAA,SAAAA,CAAA,QAAAG,CAAA,QAAA6D,UAAA,CAAAhE,CAAA,GAAAK,CAAA,GAAAF,CAAA,CAAAgE,UAAA,iBAAAhE,CAAA,CAAAyD,MAAA,SAAA6B,MAAA,aAAAtF,CAAA,CAAAyD,MAAA,SAAAwB,IAAA,QAAA7E,CAAA,GAAAT,CAAA,CAAAyB,IAAA,CAAApB,CAAA,eAAAM,CAAA,GAAAX,CAAA,CAAAyB,IAAA,CAAApB,CAAA,qBAAAI,CAAA,IAAAE,CAAA,aAAA2E,IAAA,GAAAjF,CAAA,CAAA0D,QAAA,SAAA4B,MAAA,CAAAtF,CAAA,CAAA0D,QAAA,gBAAAuB,IAAA,GAAAjF,CAAA,CAAA2D,UAAA,SAAA2B,MAAA,CAAAtF,CAAA,CAAA2D,UAAA,cAAAvD,CAAA,aAAA6E,IAAA,GAAAjF,CAAA,CAAA0D,QAAA,SAAA4B,MAAA,CAAAtF,CAAA,CAAA0D,QAAA,qBAAApD,CAAA,QAAAqC,KAAA,qDAAAsC,IAAA,GAAAjF,CAAA,CAAA2D,UAAA,SAAA2B,MAAA,CAAAtF,CAAA,CAAA2D,UAAA,YAAAR,MAAA,WAAAA,OAAA5D,CAAA,EAAAD,CAAA,aAAAE,CAAA,QAAAqE,UAAA,CAAAM,MAAA,MAAA3E,CAAA,SAAAA,CAAA,QAAAK,CAAA,QAAAgE,UAAA,CAAArE,CAAA,OAAAK,CAAA,CAAA4D,MAAA,SAAAwB,IAAA,IAAAtF,CAAA,CAAAyB,IAAA,CAAAvB,CAAA,wBAAAoF,IAAA,GAAApF,CAAA,CAAA8D,UAAA,QAAA3D,CAAA,GAAAH,CAAA,aAAAG,CAAA,iBAAAT,CAAA,mBAAAA,CAAA,KAAAS,CAAA,CAAAyD,MAAA,IAAAnE,CAAA,IAAAA,CAAA,IAAAU,CAAA,CAAA2D,UAAA,KAAA3D,CAAA,cAAAE,CAAA,GAAAF,CAAA,GAAAA,CAAA,CAAAgE,UAAA,cAAA9D,CAAA,CAAAgB,IAAA,GAAA3B,CAAA,EAAAW,CAAA,CAAAiB,GAAA,GAAA7B,CAAA,EAAAU,CAAA,SAAA6C,MAAA,gBAAAS,IAAA,GAAAtD,CAAA,CAAA2D,UAAA,EAAAlC,CAAA,SAAA8D,QAAA,CAAArF,CAAA,MAAAqF,QAAA,WAAAA,SAAAhG,CAAA,EAAAD,CAAA,oBAAAC,CAAA,CAAA2B,IAAA,QAAA3B,CAAA,CAAA4B,GAAA,qBAAA5B,CAAA,CAAA2B,IAAA,mBAAA3B,CAAA,CAAA2B,IAAA,QAAAoC,IAAA,GAAA/D,CAAA,CAAA4B,GAAA,gBAAA5B,CAAA,CAAA2B,IAAA,SAAAmE,IAAA,QAAAlE,GAAA,GAAA5B,CAAA,CAAA4B,GAAA,OAAA0B,MAAA,kBAAAS,IAAA,yBAAA/D,CAAA,CAAA2B,IAAA,IAAA5B,CAAA,UAAAgE,IAAA,GAAAhE,CAAA,GAAAmC,CAAA,KAAA+D,MAAA,WAAAA,OAAAjG,CAAA,aAAAD,CAAA,QAAAuE,UAAA,CAAAM,MAAA,MAAA7E,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAAqE,UAAA,CAAAvE,CAAA,OAAAE,CAAA,CAAAmE,UAAA,KAAApE,CAAA,cAAAgG,QAAA,CAAA/F,CAAA,CAAAwE,UAAA,EAAAxE,CAAA,CAAAoE,QAAA,GAAAG,aAAA,CAAAvE,CAAA,GAAAiC,CAAA,yBAAAgE,OAAAlG,CAAA,aAAAD,CAAA,QAAAuE,UAAA,CAAAM,MAAA,MAAA7E,CAAA,SAAAA,CAAA,QAAAE,CAAA,QAAAqE,UAAA,CAAAvE,CAAA,OAAAE,CAAA,CAAAiE,MAAA,KAAAlE,CAAA,QAAAI,CAAA,GAAAH,CAAA,CAAAwE,UAAA,kBAAArE,CAAA,CAAAuB,IAAA,QAAArB,CAAA,GAAAF,CAAA,CAAAwB,GAAA,EAAA4C,aAAA,CAAAvE,CAAA,YAAAK,CAAA,YAAA8C,KAAA,8BAAA+C,aAAA,WAAAA,cAAApG,CAAA,EAAAE,CAAA,EAAAG,CAAA,gBAAAmD,QAAA,KAAA3C,QAAA,EAAA6B,MAAA,CAAA1C,CAAA,GAAA+D,UAAA,EAAA7D,CAAA,EAAA+D,OAAA,EAAA5D,CAAA,oBAAAkD,MAAA,UAAA1B,GAAA,GAAA5B,CAAA,GAAAkC,CAAA,OAAAnC,CAAA;AADA;AACA,OAAOqG,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,cAAc,MAAM,kCAAkC;AAC7D,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,kBAAkB,MAAM,kCAAkC;;AAEjE;AACA,SAASC,UAAU,QAAQ,0BAA0B;AACrD,OAAOC,KAAK,MAAM,yBAAyB;;AAE3C;AACA,OAAOC,sBAAsB,MAAM,uCAAuC;;AAE1E;AACA,OAAOC,OAAO,MAAM,+BAA+B;AACnD,OAAOC,aAAa,MAAM,kCAAkC;AAC5D,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,IAAI,MAAM,yBAAyB;AAC1C,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,OAAOC,UAAU,MAAM,+BAA+B;AACtD,OAAOC,QAAQ,MAAM,6BAA6B;AAClD,SAASC,KAAK,QAAQ,0BAA0B;AAChD,OAAOC,gBAAgB,MAAM,oCAAoC;AACjE,OAAOC,KAAK,MAAM,wBAAwB;AAE1C,OAAOC,SAAS,MAAM,+DAA+D;AACrF,SAASC,oBAAoB,QAAQ,YAAY;AAGjD,IAAMC,UAAU,GAAGhB,UAAU,CAAC,UAACiB,KAAK;EAAA,OAAM;IACtCC,IAAI,EAAE;MACFC,OAAO,EAAE,MAAM;MACfC,UAAU,EAAE;IAChB,CAAC;IACDC,OAAO,EAAE;MACLC,MAAM,EAAEL,KAAK,CAACM,OAAO,CAAC,CAAC,CAAC;MACxBC,QAAQ,EAAE;IACd,CAAC;IACDC,aAAa,EAAE;MACXC,eAAe,EAAEf,KAAK,CAAC,GAAG,CAAC;MAC3B,SAAS,EAAE;QACPe,eAAe,EAAEf,KAAK,CAAC,GAAG;MAC9B;IACJ,CAAC;IACDgB,WAAW,EAAE;MACTC,KAAK,EAAE,SAAS;MAChBJ,QAAQ,EAAE,UAAU;MACpBK,GAAG,EAAE,CAAC,CAAC;MACPC,IAAI,EAAE,CAAC,CAAC;MACRC,MAAM,EAAE;IACZ,CAAC;IACDC,cAAc,EAAE;MACZJ,KAAK,EAAE,SAAS;MAChBJ,QAAQ,EAAE;IACd,CAAC;IACDS,QAAQ,EAAE;MACNC,SAAS,EAAE;IACf;EACJ,CAAC;AAAA,CAAC,CAAC;AAEH,eAAe,SAASC,WAAWA,CAACC,KAAK,EAAE;EAAA,IAAAC,KAAA;EAEvC,IAAMC,IAAI,GAAG1C,WAAW,CAAC,UAAC2C,KAAK;IAAA,OAAKA,KAAK,CAACD,IAAI;EAAA,EAAC;EAC/C,IAAAE,eAAA,GAAgChD,KAAK,CAACE,QAAQ,CAAC,EAAE,CAAC;IAAA+C,gBAAA,GAAAC,cAAA,CAAAF,eAAA;IAA3CG,QAAQ,GAAAF,gBAAA;IAAEG,WAAW,GAAAH,gBAAA;EAC5B,IAAAI,gBAAA,GAA4BrD,KAAK,CAACE,QAAQ,CAAC,EAAE,CAAC;IAAAoD,gBAAA,GAAAJ,cAAA,CAAAG,gBAAA;IAAvCE,MAAM,GAAAD,gBAAA;IAAEE,SAAS,GAAAF,gBAAA;EACxB,IAAAG,gBAAA,GAAkCzD,KAAK,CAACE,QAAQ,CAACwD,QAAQ,CAACd,KAAK,CAACe,OAAO,CAACC,QAAQ,CAACb,KAAK,CAACc,MAAM,CAAC,CAAC;IAAAC,gBAAA,GAAAZ,cAAA,CAAAO,gBAAA;IAAxFM,SAAS,GAAAD,gBAAA;IAAEE,YAAY,GAAAF,gBAAA;EAC9B,IAAAG,gBAAA,GAA0BjE,KAAK,CAACE,QAAQ,CAAC,EAAE,CAAC;IAAAgE,gBAAA,GAAAhB,cAAA,CAAAe,gBAAA;IAArCE,KAAK,GAAAD,gBAAA;IAAEE,QAAQ,GAAAF,gBAAA;EACtB,IAAAG,SAAA,GAAgCnE,QAAQ,CAAC,EAAE,CAAC;IAAAoE,UAAA,GAAApB,cAAA,CAAAmB,SAAA;IAAvCE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAC5B,IAAAG,UAAA,GAA4BvE,QAAQ,CAAC,EAAE,CAAC;IAAAwE,UAAA,GAAAxB,cAAA,CAAAuB,UAAA;IAAnCE,OAAO,GAAAD,UAAA;IAAEE,UAAU,GAAAF,UAAA;EACxB,IAAAG,UAAA,GAAoC3E,QAAQ,CAAC,EAAE,CAAC;IAAA4E,UAAA,GAAA5B,cAAA,CAAA2B,UAAA;IAA3CE,WAAW,GAAAD,UAAA;IAAEE,cAAc,GAAAF,UAAA;EAChC,IAAMG,OAAO,GAAG3D,SAAS,CAAC,CAAC;EAC3B,IAAM4D,QAAQ,GAAG1D,UAAU,CAAC,CAAC;EAC7B,IAAA2D,gBAAA,GAA8BnF,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC;IAAAkF,iBAAA,GAAAlC,cAAA,CAAAiC,gBAAA;IAA5CE,OAAO,GAAAD,iBAAA;IAAEE,UAAU,GAAAF,iBAAA;EAC1B,IAAAG,iBAAA,GAA8BvF,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC;IAAAsF,iBAAA,GAAAtC,cAAA,CAAAqC,iBAAA;IAA5CE,OAAO,GAAAD,iBAAA;IAAEE,UAAU,GAAAF,iBAAA;EAE1BvF,SAAS,CAAC,YAAM;IACZ,IAAI0F,IAAI,GAAGxB,KAAK,CAACyB,GAAG,CAAC,UAACC,KAAK,EAAEC,KAAK,EAAK;MACnC,IAAIC,IAAI,GAAG,EAAE;MACb,IAAIC,OAAO,GAAG,CAAC,QAAQ,CAAC;MACxB,IAAIC,SAAS,GAAG,KAAK;MACrB,IAAIC,eAAe,GAAG,EAAE;MACxBL,KAAK,CAACM,KAAK,CAAC3J,OAAO,CAAC,UAAC4J,IAAI,EAAEN,KAAK,EAAK;QACjC,IAAIO,MAAM,GAAGD,IAAI,CAACE,KAAK,CAACC,KAAK,CAAC,uBAAuB,CAAC;QACtDC,WAAW,GAAGJ,IAAI,CAACE,KAAK;QACxBG,OAAO,CAACC,GAAG,CAACN,IAAI,CAACE,KAAK,CAAC;QACvBG,OAAO,CAACC,GAAG,CAACL,MAAM,CAAC;QACnB,IAAIM,SAAS,GAAGP,IAAI,CAACE,KAAK,CAACC,KAAK,CAAC,yBAAyB,CAAC;QAC3DE,OAAO,CAACC,GAAG,CAACC,SAAS,CAAC;QACtB,IAAIN,MAAM,EAAE;UACRJ,SAAS,GAAG,IAAI;QACpB;QACA,IAAIO,WAAW,GAAG,EAAE;QACpBC,OAAO,CAACC,GAAG,CAACT,SAAS,CAAC;QACtB,IAAIW,MAAM,GAAG,EAAE;QACf,IAAIC,cAAc,GAAG,EAAE;QACvB,IAAIC,cAAc,GAAG,EAAE;QACvB,IAAIb,SAAS,EAAE;UACX,IAAIc,MAAM,GAAG,CAAC;UACd;UACA,IAAIV,MAAM,CAAC7H,MAAM,IAAI,CAAC,EAAE;YACpB6H,MAAM,CAACT,GAAG,CAAC,UAAChH,IAAI,EAAEoI,GAAG,EAAK;cAEtB;cACA,IAAIC,MAAM,GAAGb,IAAI,CAACE,KAAK,CAACC,KAAK,CAAC,uBAAuB,CAAC;cACtDE,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;cACzBD,OAAO,CAACC,GAAG,CAACN,IAAI,CAACE,KAAK,CAAC;cACvB,IAAIY,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;gBACvBR,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;gBAC3B,IAAIO,MAAM,CAACzI,MAAM,KAAK,CAAC,EAAE;kBACrByI,MAAM,CAACrB,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;oBAC3BW,OAAO,CAACC,GAAG,CAACU,OAAO,CAAC;oBACpB,IAAIC,SAAS;oBACb,IAAIC,OAAO,GAAG,WAAW;oBACzB,IAAIC,OAAO,GAAG,CAAC;oBACf,IAAIC,OAAO,GAAG,CAAC;oBACfzC,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;sBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;wBACpD3C,WAAW,CAACiC,GAAG,CAAC,CAACW,KAAK,CAAC/B,GAAG,CAAC,UAACgC,OAAO,EAAEC,MAAM,EAAK;0BAC5C,IAAID,OAAO,CAACE,IAAI,KAAK,qBAAqB,EAAE;4BACxC,IAAIF,OAAO,CAACD,KAAK,KAAK,WAAW,EAAE;8BAC/BJ,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB,CAAC,MAAM,IAAIK,OAAO,CAACD,KAAK,KAAK,UAAU,EAAE;8BACrCH,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB;0BACJ;wBACJ,CAAC,CAAC;wBACF,IAAID,OAAO,GAAGC,OAAO,EAAE;0BACnBF,OAAO,GAAG,WAAW;wBACzB,CAAC,MAAM,IAAIE,OAAO,GAAG,CAAC,EAAE;0BACpBF,OAAO,GAAG,UAAU;wBACxB;wBACAD,SAAS,GAAGjB,IAAI,CAACjD,QAAQ;sBAC7B;oBACJ,CAAC,CAAC;oBACFyD,MAAM,GAAGrG,kBAAkB,CAAC;sBAAEwH,KAAK,EAAEX,OAAO;sBAAEd,KAAK,EAAEF,IAAI,CAACE,KAAK;sBAAE/C,MAAM,EAAE+D,OAAO;sBAAEnE,QAAQ,EAAEkE;oBAAU,CAAC,CAAC;oBACxGZ,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC;kBACvB,CAAC,CAAC;gBACN,CAAC,MAAM,IAAIK,MAAM,CAACzI,MAAM,GAAG,CAAC,EAAE;kBAC1B,IAAIwJ,OAAO,GAAG5B,IAAI,CAACE,KAAK;kBACxBG,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;kBAClCD,OAAO,CAACC,GAAG,CAACN,IAAI,CAACE,KAAK,CAAC;kBACvB,IAAI2B,WAAW,GAAG,EAAE;kBACpBhB,MAAM,CAACrB,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;oBAC3B,IAAIuB,SAAS;oBACb,IAAIC,OAAO,GAAG,WAAW;oBACzB,IAAIC,OAAO,GAAG,CAAC;oBACf,IAAIC,OAAO,GAAG,CAAC;oBACfzC,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;sBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;wBACpD3C,WAAW,CAACiC,GAAG,CAAC,CAACW,KAAK,CAAC/B,GAAG,CAAC,UAACgC,OAAO,EAAEC,MAAM,EAAK;0BAC5C,IAAID,OAAO,CAACE,IAAI,KAAK,qBAAqB,EAAE;4BACxC,IAAIF,OAAO,CAACD,KAAK,KAAK,WAAW,EAAE;8BAC/BJ,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB,CAAC,MAAM,IAAIK,OAAO,CAACD,KAAK,KAAK,UAAU,EAAE;8BACrCH,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB;0BACJ;wBACJ,CAAC,CAAC;wBACF,IAAID,OAAO,GAAGC,OAAO,EAAE;0BACnBF,OAAO,GAAG,WAAW;wBACzB,CAAC,MAAM,IAAIE,OAAO,GAAG,CAAC,EAAE;0BACpBF,OAAO,GAAG,UAAU;wBACxB;wBACAD,SAAS,GAAGjB,IAAI,CAACjD,QAAQ;sBAC7B;oBACJ,CAAC,CAAC;oBACF8E,WAAW,GAAG1H,kBAAkB,CAAC;sBAAEwH,KAAK,EAAEX,OAAO;sBAAEd,KAAK,EAAE0B,OAAO;sBAAEzE,MAAM,EAAE+D,OAAO;sBAAEnE,QAAQ,EAAEkE;oBAAU,CAAC,CAAC;oBAC1GW,OAAO,GAAGC,WAAW;kBACzB,CAAC,CAAC;kBACFrB,MAAM,GAAGoB,OAAO;kBAChBvB,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC;gBACvB;cACJ;;cAGA;cACAH,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;cACrBD,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC;cACnB,IAAIxM,KAAK,GAAGwM,MAAM,IAAI,EAAE,GAAGA,MAAM,GAAGR,IAAI,CAACE,KAAK;cAC9CG,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;cACpBD,OAAO,CAACC,GAAG,CAACtM,KAAK,CAAC;cAClB,IAAI8N,YAAY,GAAG9N,KAAK,CAAC+N,SAAS,CAACpB,MAAM,EAAE3M,KAAK,CAACgO,OAAO,CAACxJ,IAAI,CAAC,CAAC,CAAC,CAAC;cACjE,IAAIyJ,UAAU,GAAGjO,KAAK,CAACgO,OAAO,CAACxJ,IAAI,CAAC,GAAGA,IAAI,CAACJ,MAAM,CAAC,CAAC;cACpD,IAAI8J,YAAY,GAAGlO,KAAK,CAAC+N,SAAS,CAACE,UAAU,EAAEjO,KAAK,CAACgO,OAAO,CAACzB,SAAS,CAACK,GAAG,CAAC,CAAC,CAAC;cAC7E,IAAIuB,WAAW,GAAGnO,KAAK,CAACgO,OAAO,CAACzB,SAAS,CAACK,GAAG,CAAC,CAAC,GAAGL,SAAS,CAACK,GAAG,CAAC,CAACxI,MAAM,CAAC,CAAC;cACzEiI,OAAO,CAACC,GAAG,CAACwB,YAAY,CAAC;cACzBzB,OAAO,CAACC,GAAG,CAAC4B,YAAY,CAAC;cACzBvB,MAAM,GAAGwB,WAAW;cACpB9B,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;cACrBD,OAAO,CAACC,GAAG,CAAC9H,IAAI,CAAC;;cAEjB;cACA6H,OAAO,CAACC,GAAG,CAACN,IAAI,CAACE,KAAK,CAAC;cACvB,IAAIkC,aAAa,GAAGF,YAAY,CAAC/B,KAAK,CAAC,mBAAmB,CAAC;cAC3D,IAAIW,KAAK,CAACC,OAAO,CAACqB,aAAa,CAAC,EAAE;gBAC9B/B,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;gBAC9B,IAAI8B,aAAa,CAAChK,MAAM,KAAK,CAAC,EAAE;kBAC5BgK,aAAa,CAAC5C,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;oBAClCW,OAAO,CAACC,GAAG,CAACU,OAAO,CAAC;oBACpB,IAAIC,SAAS;oBACb,IAAIC,OAAO,GAAG,EAAE;oBAChB,IAAIC,OAAO,GAAG,CAAC;oBACf,IAAIC,OAAO,GAAG,CAAC;oBACfzC,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;sBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;wBACpD3C,WAAW,CAACiC,GAAG,CAAC,CAACW,KAAK,CAAC/B,GAAG,CAAC,UAACgC,OAAO,EAAEC,MAAM,EAAK;0BAC5C,IAAID,OAAO,CAACE,IAAI,KAAK,qBAAqB,EAAE;4BACxC,IAAIF,OAAO,CAACD,KAAK,KAAK,WAAW,EAAE;8BAC/BJ,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB,CAAC,MAAM,IAAIK,OAAO,CAACD,KAAK,KAAK,UAAU,EAAE;8BACrCH,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB;0BACJ;wBACJ,CAAC,CAAC;wBACF,IAAID,OAAO,GAAGC,OAAO,EAAE;0BACnBF,OAAO,GAAG,WAAW;wBACzB,CAAC,MAAM,IAAIE,OAAO,GAAG,CAAC,EAAE;0BACpBF,OAAO,GAAG,UAAU;wBACxB;wBACAD,SAAS,GAAGjB,IAAI,CAACjD,QAAQ;sBAC7B;oBACJ,CAAC,CAAC;oBACF0D,cAAc,GAAGtG,kBAAkB,CAAC;sBAAEwH,KAAK,EAAEX,OAAO;sBAAEd,KAAK,EAAEF,IAAI,CAACE,KAAK;sBAAE/C,MAAM,EAAE+D,OAAO;sBAAEnE,QAAQ,EAAEkE;oBAAU,CAAC,CAAC;oBAChHZ,OAAO,CAACC,GAAG,CAACG,cAAc,CAAC;kBAC/B,CAAC,CAAC;gBACN,CAAC,MAAM,IAAI2B,aAAa,CAAChK,MAAM,GAAG,CAAC,EAAE;kBACjC,IAAIwJ,QAAO,GAAG5B,IAAI,CAACE,KAAK;kBACxB,IAAI2B,YAAW,GAAG,EAAE;kBACpBO,aAAa,CAAC5C,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;oBAClCW,OAAO,CAACC,GAAG,CAACU,OAAO,CAAC;oBACpB,IAAIC,SAAS;oBACb,IAAIC,OAAO,GAAG,EAAE;oBAChB,IAAIC,OAAO,GAAG,CAAC;oBACf,IAAIC,OAAO,GAAG,CAAC;oBACfzC,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;sBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;wBACpD3C,WAAW,CAACiC,GAAG,CAAC,CAACW,KAAK,CAAC/B,GAAG,CAAC,UAACgC,OAAO,EAAEC,MAAM,EAAK;0BAC5C,IAAID,OAAO,CAACE,IAAI,KAAK,qBAAqB,EAAE;4BACxC,IAAIF,OAAO,CAACD,KAAK,KAAK,WAAW,EAAE;8BAC/BJ,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB,CAAC,MAAM,IAAIK,OAAO,CAACD,KAAK,KAAK,UAAU,EAAE;8BACrCH,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB;0BACJ;wBACJ,CAAC,CAAC;wBACF,IAAID,OAAO,GAAGC,OAAO,EAAE;0BACnBF,OAAO,GAAG,WAAW;wBACzB,CAAC,MAAM,IAAIE,OAAO,GAAG,CAAC,EAAE;0BACpBF,OAAO,GAAG,UAAU;wBACxB;wBACAD,SAAS,GAAGjB,IAAI,CAACjD,QAAQ;sBAC7B;oBACJ,CAAC,CAAC;oBACF8E,YAAW,GAAG1H,kBAAkB,CAAC;sBAAEwH,KAAK,EAAEX,OAAO;sBAAEd,KAAK,EAAE0B,QAAO;sBAAEzE,MAAM,EAAE+D,OAAO;sBAAEnE,QAAQ,EAAEkE;oBAAU,CAAC,CAAC;oBAC1GZ,OAAO,CAACC,GAAG,CAACG,cAAc,CAAC;oBAC3BmB,QAAO,GAAGC,YAAW;kBACzB,CAAC,CAAC;kBACFpB,cAAc,GAAGmB,QAAO;gBAC5B;cACJ;;cAEA;cACA,IAAIS,aAAa,GAAGP,YAAY,CAAC3B,KAAK,CAAC,mBAAmB,CAAC;cAC3D,IAAIW,KAAK,CAACC,OAAO,CAACsB,aAAa,CAAC,EAAE;gBAC9BhC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;gBAC9B,IAAI+B,aAAa,CAACjK,MAAM,KAAK,CAAC,EAAE;kBAC5BiK,aAAa,CAAC7C,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;oBAClCW,OAAO,CAACC,GAAG,CAACU,OAAO,CAAC;oBACpB,IAAIC,SAAS;oBACb,IAAIC,OAAO,GAAG,EAAE;oBAChB,IAAIC,OAAO,GAAG,CAAC;oBACf,IAAIC,OAAO,GAAG,CAAC;oBACfzC,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;sBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;wBACpD3C,WAAW,CAACiC,GAAG,CAAC,CAACW,KAAK,CAAC/B,GAAG,CAAC,UAACgC,OAAO,EAAEC,MAAM,EAAK;0BAC5C,IAAID,OAAO,CAACE,IAAI,KAAK,qBAAqB,EAAE;4BACxC,IAAIF,OAAO,CAACD,KAAK,KAAK,WAAW,EAAE;8BAC/BJ,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB,CAAC,MAAM,IAAIK,OAAO,CAACD,KAAK,KAAK,UAAU,EAAE;8BACrCH,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB;0BACJ;wBACJ,CAAC,CAAC;wBACF,IAAID,OAAO,GAAGC,OAAO,EAAE;0BACnBF,OAAO,GAAG,WAAW;wBACzB,CAAC,MAAM,IAAIE,OAAO,GAAG,CAAC,EAAE;0BACpBF,OAAO,GAAG,UAAU;wBACxB;wBACAD,SAAS,GAAGjB,IAAI,CAACjD,QAAQ;sBAC7B;oBACJ,CAAC,CAAC;oBACF2D,cAAc,GAAGvG,kBAAkB,CAAC;sBAAEwH,KAAK,EAAEX,OAAO;sBAAEd,KAAK,EAAEF,IAAI,CAACE,KAAK;sBAAE/C,MAAM,EAAE+D,OAAO;sBAAEnE,QAAQ,EAAEkE;oBAAU,CAAC,CAAC;oBAChHZ,OAAO,CAACC,GAAG,CAACI,cAAc,CAAC;kBAC/B,CAAC,CAAC;gBACN,CAAC,MAAM,IAAI2B,aAAa,CAACjK,MAAM,GAAG,CAAC,EAAE;kBACjC,IAAIwJ,SAAO,GAAG5B,IAAI,CAACE,KAAK;kBACxB,IAAI2B,aAAW,GAAG,EAAE;kBACpBQ,aAAa,CAAC7C,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;oBAClCW,OAAO,CAACC,GAAG,CAACU,OAAO,CAAC;oBACpB,IAAIC,SAAS;oBACb,IAAIC,OAAO,GAAG,EAAE;oBAChB,IAAIC,OAAO,GAAG,CAAC;oBACf,IAAIC,OAAO,GAAG,CAAC;oBACfzC,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;sBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;wBACpD3C,WAAW,CAACiC,GAAG,CAAC,CAACW,KAAK,CAAC/B,GAAG,CAAC,UAACgC,OAAO,EAAEC,MAAM,EAAK;0BAC5C,IAAID,OAAO,CAACE,IAAI,KAAK,qBAAqB,EAAE;4BACxC,IAAIF,OAAO,CAACD,KAAK,KAAK,WAAW,EAAE;8BAC/BJ,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB,CAAC,MAAM,IAAIK,OAAO,CAACD,KAAK,KAAK,UAAU,EAAE;8BACrCH,OAAO,GAAGA,OAAO,GAAG,CAAC;4BACzB;0BACJ;wBACJ,CAAC,CAAC;wBACFf,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;wBACrBD,OAAO,CAACC,GAAG,CAACa,OAAO,CAAC;wBACpBd,OAAO,CAACC,GAAG,CAACc,OAAO,CAAC;wBACpB,IAAID,OAAO,GAAGC,OAAO,EAAE;0BACnBF,OAAO,GAAG,WAAW;wBACzB,CAAC,MAAM,IAAIE,OAAO,GAAG,CAAC,EAAE;0BACpB,IAAID,OAAO,KAAK,CAAC,EAAE;4BACfD,OAAO,GAAG,UAAU;0BACxB;wBACJ;wBACAD,SAAS,GAAGjB,IAAI,CAACjD,QAAQ;sBAC7B;oBACJ,CAAC,CAAC;oBACF8E,aAAW,GAAG1H,kBAAkB,CAAC;sBAAEwH,KAAK,EAAEX,OAAO;sBAAEd,KAAK,EAAE0B,SAAO;sBAAEzE,MAAM,EAAE+D,OAAO;sBAAEnE,QAAQ,EAAEkE;oBAAU,CAAC,CAAC;oBAC1GZ,OAAO,CAACC,GAAG,CAACI,cAAc,CAAC;oBAC3BkB,SAAO,GAAGC,aAAW;kBACzB,CAAC,CAAC;kBACFnB,cAAc,GAAGkB,SAAO;gBAC5B;cACJ;cAGAvB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;cAC1BD,OAAO,CAACC,GAAG,CAAC3B,WAAW,CAAC;;cAExB;cACA0B,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;cAE3C,IAAIqB,KAAK,GAAGO,YAAY,CAAC/B,KAAK,CAAC,2BAA2B,CAAC;cAC3D,IAAIW,KAAK,CAACC,OAAO,CAACY,KAAK,CAAC,EAAE;gBACtB,IAAIlB,cAAc,IAAI,EAAE,EAAE;kBACtB,IAAIkB,KAAK,CAACvJ,MAAM,KAAK,CAAC,EAAE;oBACpBiI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;oBAC9BqB,KAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;sBAC1B,IAAI4C,QAAQ,GAAG,EAAE;sBACjB,IAAIC,QAAQ,GAAG,KAAK;sBACpB,IAAIC,mBAAmB,GAAG,CAAC;sBAC3B,IAAIxC,IAAI,CAACE,KAAK,IAAI,EAAE,EAAE;wBAClB;wBACAvB,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;0BAC3B,IAAIpI,IAAI,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;4BACjDkB,mBAAmB,GAAG5B,GAAG;0BAC7B;wBACJ,CAAC,CAAC;;wBAEF;wBACA;wBACAhB,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;0BACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;4BAC9CF,QAAQ,GAAG,IAAI;0BACnB;wBACJ,CAAC,CAAC;;wBAEF;wBACA,IAAI,CAACA,QAAQ,EAAE;0BACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;0BAChD1C,WAAW,CAAC6D,mBAAmB,CAAC,CAACjB,KAAK,CAAC/B,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;4BACtD,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;8BAClEiB,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;4BACtB;0BACJ,CAAC,CAAC;;0BAEF;0BACAjB,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;4BACrB0I,GAAG,EAAEjD,KAAM;4BACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;4BACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;4BAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;4BACtBC,IAAI,EAAE/C,IAAI,CAAC+C,IAAK;4BAChB7C,KAAK,EAAEhG,aAAa,CAAC;8BAAEyH,KAAK,EAAEX,OAAO;8BAAEd,KAAK,EAAEO,cAAc;8BAAEuC,IAAI,EAAErE,WAAW,CAACiC,GAAG,CAAC,CAACW,KAAK,CAACe,QAAQ,CAAC,CAAC,CAAC;4BAAE,CAAC,CAAC,CAAC,CAAC,CAAE;4BAAAW,MAAA,EAAAxG,KAAA;4BAAAyG,QAAA;8BAAAC,QAAA,EAAAC,YAAA;8BAAAC,UAAA;8BAAAC,YAAA;4BAAA;0BAAA,CACjH,CAAC,CAAC;wBACP;sBACJ;oBACJ,CAAC,CAAC;kBACN,CAAC,MAAM,IAAI3B,KAAK,CAACvJ,MAAM,GAAG,CAAC,EAAE;oBACzBiI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;oBAC9B,IAAIsB,SAAO,GAAGnB,cAAc;oBAC5B,IAAIoB,aAAW,GAAG,EAAE;oBACpB,IAAIU,QAAQ;oBACZ,IAAIC,mBAAmB,GAAG,CAAC;oBAC3Bb,KAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;sBAC1B,IAAI4C,QAAQ,GAAG,EAAE;sBACjBC,QAAQ,GAAG,KAAK;sBAChB,IAAIX,SAAO,IAAI,EAAE,EAAE;wBACfjD,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;0BAC3B,IAAIpI,IAAI,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;4BACjDkB,mBAAmB,GAAG5B,GAAG;0BAC7B;wBACJ,CAAC,CAAC;wBACF;wBACA;wBACAhB,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;0BACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;4BAC9CF,QAAQ,GAAG,IAAI;0BACnB;wBACJ,CAAC,CAAC;wBACF;wBACA,IAAI,CAACA,QAAQ,EAAE;0BACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;0BAChD1C,WAAW,CAAC6D,mBAAmB,CAAC,CAACjB,KAAK,CAAC/B,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;4BACtD,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;8BAClEiB,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;4BACtB;0BACJ,CAAC,CAAC;0BACFiB,aAAW,GAAG3H,aAAa,CAAC;4BAAEyH,KAAK,EAAEX,OAAO;4BAAEd,KAAK,EAAE0B,SAAO;4BAAEoB,IAAI,EAAErE,WAAW,CAACiC,GAAG,CAAC,CAACW,KAAK,CAACe,QAAQ,CAAC,CAAC,CAAC;0BAAE,CAAC,CAAC;0BAC1GV,SAAO,GAAGC,aAAW,CAAC,CAAC,CAAC;wBAC5B;sBACJ;oBACJ,CAAC,CAAC;oBACF,IAAI,CAACU,QAAQ,EAAE;sBACX5C,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;wBACrB0I,GAAG,EAAEjD,KAAM;wBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;wBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;wBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;wBACtBC,IAAI,EAAE,EAAG;wBACT7C,KAAK,EAAE2B,aAAW,CAAC,CAAC,CAAE;wBAAAoB,MAAA,EAAAxG,KAAA;wBAAAyG,QAAA;0BAAAC,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA;sBAAA,CACzB,CAAC,CAAC;oBACP;kBACJ;gBACJ,CAAC,MAAM;kBACH;kBACA,IAAI3B,KAAK,CAACvJ,MAAM,KAAK,CAAC,EAAE;oBACpBiI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;oBAC9BqB,KAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;sBAC1B,IAAI4C,QAAQ,GAAG,EAAE;sBACjB,IAAIC,QAAQ,GAAG,KAAK;sBACpB,IAAIC,mBAAmB,GAAG,CAAC;sBAC3B,IAAIxC,IAAI,CAACE,KAAK,IAAI,EAAE,EAAE;wBAClBvB,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;0BAC3B,IAAIpI,IAAI,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;4BACjDkB,mBAAmB,GAAG5B,GAAG;0BAC7B;wBACJ,CAAC,CAAC;wBACFP,OAAO,CAACC,GAAG,CAAC,iBAAiB,GAAGkC,mBAAmB,CAAC;wBACpD;wBACA;wBACA5C,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;0BACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;4BAC9CF,QAAQ,GAAG,IAAI;0BACnB;wBACJ,CAAC,CAAC;wBACF;wBACA,IAAI,CAACA,QAAQ,EAAE;0BACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;0BAChD,IAAIkC,cAAc,GAAGvC,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;0BACvD,IAAImC,iBAAiB,GAAGxC,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;0BAC1D,IAAIoC,WAAW,GAAG,CAAC;0BACnB,IAAIC,WAAW,GAAG,EAAE;0BACpB/E,WAAW,CAAC6D,mBAAmB,CAAC,CAACjB,KAAK,CAAC/B,GAAG,CAAC,UAACmE,MAAM,EAAE/C,GAAG,EAAK;4BACxDP,OAAO,CAACC,GAAG,CAAC4B,YAAY,CAAC0B,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;4BAC3CvD,OAAO,CAACC,GAAG,CAACqD,MAAM,CAACrC,MAAM,CAAC;4BAC1BjB,OAAO,CAACC,GAAG,CAACiD,cAAc,CAAC;4BAC3B,IAAIC,iBAAiB,KAAKG,MAAM,CAACrC,MAAM,EAAE;8BACrCoC,WAAW,GAAGA,WAAW,GAAGxJ,aAAa,CAAC;gCAAEyH,KAAK,EAAEX,OAAO;gCAAEd,KAAK,EAAEgC,YAAY,CAAC0B,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;gCAAEZ,IAAI,EAAErE,WAAW,CAAC6D,mBAAmB,CAAC,CAACjB,KAAK,CAACX,GAAG;8BAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;8BACjK0B,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;8BAClBP,OAAO,CAACC,GAAG,CAACoD,WAAW,CAAC;8BACxBF,iBAAiB,GAAGD,cAAc,GAAG,GAAG,GAAGE,WAAW;8BACtDA,WAAW,GAAGA,WAAW,GAAG,CAAC;8BAC7B;4BACJ;0BAEJ,CAAC,CAAC;0BACFpD,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;0BAChCD,OAAO,CAACC,GAAG,CAAC4B,YAAY,CAAC;0BACzB,IAAI2B,SAAS,GAAG3J,aAAa,CAAC;4BAAEyH,KAAK,EAAEO,YAAY;4BAAEhC,KAAK,EAAEE,WAAW,CAAC,CAAC,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAGpM,KAAK;4BAAEgP,IAAI,EAAE;8BAAEtB,IAAI,EAAE,MAAM;8BAAEJ,MAAM,EAAE,EAAE;8BAAEwC,KAAK,EAAE,GAAG;8BAAEvC,KAAK,EAAEmC;4BAAY;0BAAE,CAAC,CAAC;0BAC1KtD,WAAW,GAAGyD,SAAS;0BACvBxD,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;0BAC1BD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;wBAE5B;sBACJ;oBACJ,CAAC,CAAC;kBACN,CAAC,MAAM,IAAIuB,KAAK,CAACvJ,MAAM,GAAG,CAAC,EAAE;oBACzBiI,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;oBAC9B,IAAIsB,SAAO,GAAG5N,KAAK;oBACnB,IAAI+P,UAAU,GAAG,EAAE;oBACnB,IAAIlC,aAAW,GAAG,EAAE;oBACpB,IAAIU,SAAQ,GAAG,KAAK;oBACpB,IAAIC,oBAAmB,GAAG,CAAC;oBAE3B,IAAIZ,SAAO,IAAI,EAAE,EAAE;sBACf;sBACAjD,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;wBAC3B,IAAIpI,IAAI,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;0BACjDkB,oBAAmB,GAAG5B,GAAG;wBAC7B;sBACJ,CAAC,CAAC;sBACF;sBACA,IAAI,CAAC2B,SAAQ,EAAE;wBACX,IAAIyB,cAAc,GAAG9B,YAAY;wBACjC,IAAI+B,aAAa,GAAG,CAAC;wBACrB,IAAIR,WAAW,GAAG,CAAC;wBACnB,IAAIC,WAAW,GAAG,EAAE;wBACpB/E,WAAW,CAAC6D,oBAAmB,CAAC,CAACjB,KAAK,CAAC/B,GAAG,CAAC,UAACmE,MAAM,EAAE/C,GAAG,EAAK;0BACxDhB,OAAO,CAAC7H,IAAI,CAAC4L,MAAM,CAACrC,MAAM,CAAC;0BAC3B,IAAIiC,cAAc,GAAGI,MAAM,CAACrC,MAAM;0BAClC,IAAIkC,iBAAiB,GAAGG,MAAM,CAACrC,MAAM;0BACrCK,KAAK,CAACnC,GAAG,CAAC,UAAC0E,SAAS,EAAExE,KAAK,EAAK;4BAC5B;4BACAE,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;8BACnB,IAAIyB,SAAS,CAAC9K,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;gCAChDF,SAAQ,GAAG,IAAI;8BACnB;4BACJ,CAAC,CAAC;4BACF;4BACA,IAAIkB,WAAW,KAAK,CAAC,EAAE;8BACnB,IAAID,iBAAiB,KAAKU,SAAS,CAAC9K,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE;gCAC5D4C,aAAa,GAAGA,aAAa,GAAG,CAAC;gCACjCD,cAAc,GAAG9J,aAAa,CAAC;kCAAEyH,KAAK,EAAEuC,SAAS;kCAAEhE,KAAK,EAAE8D,cAAc;kCAAEhB,IAAI,EAAErE,WAAW,CAAC6D,oBAAmB,CAAC,CAACjB,KAAK,CAACX,GAAG;gCAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gCACjIP,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;gCACjCD,OAAO,CAACC,GAAG,CAAC0D,cAAc,CAAC;8BAC/B;4BACJ,CAAC,MAAM;8BACH,IAAIG,WAAW,GAAGD,SAAS,CAAC9K,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGoC,WAAW;8BAC1EpD,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;8BACzBD,OAAO,CAACC,GAAG,CAAC6D,WAAW,CAAC;8BACxB9D,OAAO,CAACC,GAAG,CAACkD,iBAAiB,CAAC;8BAC9B,IAAIA,iBAAiB,KAAKW,WAAW,EAAE;gCACnCF,aAAa,GAAGA,aAAa,GAAG,CAAC;gCACjCD,cAAc,GAAG9J,aAAa,CAAC;kCAAEyH,KAAK,EAAEuC,SAAS;kCAAEhE,KAAK,EAAE8D,cAAc;kCAAEhB,IAAI,EAAErE,WAAW,CAAC6D,oBAAmB,CAAC,CAACjB,KAAK,CAACX,GAAG;gCAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gCACjIP,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;gCAClCD,OAAO,CAACC,GAAG,CAAC0D,cAAc,CAAC;8BAC/B;4BACJ;4BACA3D,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;4BAC7CD,OAAO,CAACC,GAAG,CAAC2D,aAAa,CAAC;4BAC1B5D,OAAO,CAACC,GAAG,CAACqB,KAAK,CAACvJ,MAAM,CAAC;4BACzB,IAAI6L,aAAa,KAAKtC,KAAK,CAACvJ,MAAM,EAAE;8BAChCsL,WAAW,GAAGA,WAAW,GAAGM,cAAc;8BAC1C3D,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;8BAC9BD,OAAO,CAACC,GAAG,CAACoD,WAAW,CAAC;8BACxBO,aAAa,GAAG,CAAC;8BACjBR,WAAW,GAAGA,WAAW,GAAG,CAAC;8BAC7BO,cAAc,GAAG9B,YAAY;4BACjC;0BAEJ,CAAC,CAAC;0BACF6B,UAAU,GAAGL,WAAW;wBAC5B,CAAC,CAAC;wBACFrD,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;wBACpBD,OAAO,CAACC,GAAG,CAACsB,SAAO,CAACgC,OAAO,CAAC1B,YAAY,EAAE6B,UAAU,CAAC,CAAC;wBACtD1D,OAAO,CAACC,GAAG,CAAC4B,YAAY,CAAC;wBACzB7B,OAAO,CAACC,GAAG,CAACyD,UAAU,CAAC;wBACvB1D,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC,CAAC,CAAC,CAAC;wBAC3BwB,SAAO,GAAG1H,aAAa,CAAC;0BAAEyH,KAAK,EAAEO,YAAY;0BAAEhC,KAAK,EAAEE,WAAW,CAAC,CAAC,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAGpM,KAAK;0BAAEgP,IAAI,EAAE;4BAAEtB,IAAI,EAAE,MAAM;4BAAEJ,MAAM,EAAE,EAAE;4BAAEwC,KAAK,EAAE,GAAG;4BAAEvC,KAAK,EAAEwC;0BAAW;wBAAE,CAAC,CAAC;wBACnK3D,WAAW,GAAGwB,SAAO;wBACrBvB,OAAO,CAACC,GAAG,CAACsB,SAAO,CAAC;sBACxB;oBACJ;oBACA,IAAI,CAACW,SAAQ,EAAE;sBACX5C,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;wBACrB0I,GAAG,EAAEjD,KAAM;wBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;wBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;wBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;wBACtBC,IAAI,EAAE,EAAG;wBACT7C,KAAK,EAAE2B,aAAW,CAAC,CAAC,CAAE;wBAAAoB,MAAA,EAAAxG,KAAA;wBAAAyG,QAAA;0BAAAC,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA;sBAAA,CACzB,CAAC,CAAC;oBACP;kBACJ;gBACJ;cAEJ,CAAC,MAAM;gBAEH,IAAI7C,cAAc,IAAI,EAAE,EAAE;kBACtB,IAAIX,eAAe,IAAIW,cAAc,IAAIX,eAAe,IAAIE,IAAI,CAACE,KAAK,EAAE;oBACpEP,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;sBACrB0I,GAAG,EAAEjD,KAAM;sBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;sBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;sBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;sBACtBC,IAAI,EAAE/C,IAAI,CAAC+C,IAAK;sBAChB7C,KAAK,EAAEO,cAAc,GAAG,GAAI;sBAAAwC,MAAA,EAAAxG,KAAA;sBAAAyG,QAAA;wBAAAC,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA;oBAAA,CAC/B,CACD,CAAC;kBACL;kBACAxD,eAAe,GAAGE,IAAI,CAACE,KAAK;gBAChC,CAAC,MAAM;kBACHG,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGG,cAAc,CAAC;kBAC3C,IAAIX,eAAe,IAAIE,IAAI,CAACE,KAAK,EAAE;oBAC/BP,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;sBACrB0I,GAAG,EAAEjD,KAAM;sBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;sBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;sBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;sBACtBC,IAAI,EAAE/C,IAAI,CAAC+C,IAAK;sBAChB7C,KAAK,EAAEF,IAAI,CAACE,KAAK,GAAG,GAAI;sBAAA+C,MAAA,EAAAxG,KAAA;sBAAAyG,QAAA;wBAAAC,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA;oBAAA,CAC3B,CACD,CAAC;kBACL;kBACAxD,eAAe,GAAGE,IAAI,CAACE,KAAK;gBAChC;cACJ;cAEA,IAAI4B,YAAY,EAAE;gBACd,IAAIH,MAAK,GAAGG,YAAY,CAAC3B,KAAK,CAAC,2BAA2B,CAAC;gBAC3DE,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;gBACjCD,OAAO,CAACC,GAAG,CAACqB,MAAK,CAAC;gBAElB,IAAIb,KAAK,CAACC,OAAO,CAACY,MAAK,CAAC,EAAE;kBACtB,IAAIjB,cAAc,IAAI,EAAE,EAAE;oBACtB,IAAIiB,MAAK,CAACvJ,MAAM,KAAK,CAAC,EAAE;sBACpBuJ,MAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;wBAC1B,IAAI4C,QAAQ,GAAG,EAAE;wBACjB,IAAIC,QAAQ,GAAG,KAAK;wBACpB,IAAIvC,IAAI,CAACE,KAAK,IAAI,EAAE,EAAE;0BAClB;0BACA;0BACAN,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;4BACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;8BAC9CF,QAAQ,GAAG,IAAI;4BACnB;0BACJ,CAAC,CAAC;0BACF;0BACA,IAAI,CAACA,QAAQ,EAAE;4BACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BAChD1C,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;8BAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;gCACpDgB,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;8BACtB;4BACJ,CAAC,CAAC;4BACFjB,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;8BACrB0I,GAAG,EAAEjD,KAAM;8BACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;8BACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;8BAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;8BACtBC,IAAI,EAAE/C,IAAI,CAAC+C,IAAK;8BAChB7C,KAAK,EAAEhG,aAAa,CAAC;gCAAEyH,KAAK,EAAEX,OAAO;gCAAEd,KAAK,EAAEQ,cAAc;gCAAEsC,IAAI,EAAErE,WAAW,CAAC2D,QAAQ,CAAC,CAAC,CAAC;8BAAE,CAAC,CAAC,CAAC,CAAC,CAAE;8BAAAW,MAAA,EAAAxG,KAAA;8BAAAyG,QAAA;gCAAAC,QAAA,EAAAC,YAAA;gCAAAC,UAAA;gCAAAC,YAAA;8BAAA;4BAAA,CACtG,CAAC,CAAC;0BACP;wBACJ;sBACJ,CAAC,CAAC;oBACN,CAAC,MAAM,IAAI3B,MAAK,CAACvJ,MAAM,GAAG,CAAC,EAAE;sBACzB,IAAIwJ,SAAO,GAAGlB,cAAc;sBAC5B,IAAImB,aAAW,GAAG,EAAE;sBACpB,IAAIU,UAAQ;sBACZZ,MAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;wBAC1B,IAAI4C,QAAQ,GAAG,EAAE;wBACjBC,UAAQ,GAAG,KAAK;wBAChB,IAAIX,SAAO,IAAI,EAAE,EAAE;0BACf;0BACA;0BACAhC,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;4BACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;8BAC9CF,UAAQ,GAAG,IAAI;4BACnB;0BACJ,CAAC,CAAC;0BACF;0BACA,IAAI,CAACA,UAAQ,EAAE;4BACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BAChD1C,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;8BAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;gCACpDgB,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;8BACtB;4BACJ,CAAC,CAAC;4BACFiB,aAAW,GAAG3H,aAAa,CAAC;8BAAEyH,KAAK,EAAEX,OAAO;8BAAEd,KAAK,EAAE0B,SAAO;8BAAEoB,IAAI,EAAErE,WAAW,CAAC2D,QAAQ,CAAC,CAAC,CAAC;4BAAE,CAAC,CAAC;4BAC/FV,SAAO,GAAGC,aAAW,CAAC,CAAC,CAAC;0BAC5B;wBACJ;sBACJ,CAAC,CAAC;sBACF,IAAI,CAACU,UAAQ,EAAE;wBACX5C,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;0BACrB0I,GAAG,EAAEjD,KAAM;0BACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;0BACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;0BAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;0BACtBC,IAAI,EAAE,EAAG;0BACT7C,KAAK,EAAE2B,aAAW,CAAC,CAAC,CAAE;0BAAAoB,MAAA,EAAAxG,KAAA;0BAAAyG,QAAA;4BAAAC,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA;wBAAA,CACzB,CAAC,CAAC;sBACP;oBACJ;kBACJ,CAAC,MAAM;oBACH;oBACA,IAAI3B,MAAK,CAACvJ,MAAM,KAAK,CAAC,EAAE;sBACpBuJ,MAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;wBAC1B,IAAI4C,QAAQ,GAAG,EAAE;wBACjB,IAAIC,QAAQ,GAAG,KAAK;wBACpB,IAAIvC,IAAI,CAACE,KAAK,IAAI,EAAE,EAAE;0BAClB;0BACA;0BACA;0BACAN,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;4BACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;8BAC9CF,QAAQ,GAAG,IAAI;4BACnB;0BACJ,CAAC,CAAC;0BACF;0BACA,IAAI,CAACA,QAAQ,EAAE;4BACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BAChD1C,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;8BAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;gCACpDgB,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;8BACtB;4BAEJ,CAAC,CAAC;4BACF,IAAIwD,SAAS,GAAGlK,aAAa,CAAC;8BAAEyH,KAAK,EAAEX,OAAO;8BAAEd,KAAK,EAAEE,WAAW,CAAC,CAAC,CAAC,GAAGA,WAAW,CAAC,CAAC,CAAC,GAAGpM,KAAK;8BAAEgP,IAAI,EAAErE,WAAW,CAAC2D,QAAQ,CAAC,CAAC,CAAC;4BAAE,CAAC,CAAC;4BACjIlC,WAAW,GAAGgE,SAAS;4BACvB/D,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;4BAC1BD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;0BAC5B;wBACJ;sBACJ,CAAC,CAAC;oBACN,CAAC,MAAM,IAAIuB,MAAK,CAACvJ,MAAM,GAAG,CAAC,EAAE;sBACzB,IAAIwJ,SAAO,GAAG5N,KAAK;sBACnB,IAAI6N,aAAW,GAAG,EAAE;sBACpB,IAAIU,UAAQ;sBACZZ,MAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;wBAC1B,IAAI4C,QAAQ,GAAG,EAAE;wBACjBC,UAAQ,GAAG,KAAK;wBAChB,IAAIX,SAAO,IAAI,EAAE,EAAE;0BACf;0BACA;0BACAhC,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;4BACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;8BAC9CF,UAAQ,GAAG,IAAI;4BACnB;0BACJ,CAAC,CAAC;0BACF;0BACA,IAAI,CAACA,UAAQ,EAAE;4BACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;4BAChD1C,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;8BAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;gCACpDgB,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;8BACtB;4BACJ,CAAC,CAAC;4BACFiB,aAAW,GAAG3H,aAAa,CAAC;8BAAEyH,KAAK,EAAEX,OAAO;8BAAEd,KAAK,EAAE0B,SAAO;8BAAEoB,IAAI,EAAErE,WAAW,CAAC2D,QAAQ,CAAC,CAAC,CAAC;4BAAE,CAAC,CAAC;4BAC/FV,SAAO,GAAGC,aAAW,CAAC,CAAC,CAAC;0BAC5B;wBACJ;sBACJ,CAAC,CAAC;sBACF,IAAI,CAACU,UAAQ,EAAE;wBACX5C,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;0BACrB0I,GAAG,EAAEjD,KAAM;0BACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;0BACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;0BAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;0BACtBC,IAAI,EAAE,EAAG;0BACT7C,KAAK,EAAE2B,aAAW,CAAC,CAAC,CAAE;0BAAAoB,MAAA,EAAAxG,KAAA;0BAAAyG,QAAA;4BAAAC,QAAA,EAAAC,YAAA;4BAAAC,UAAA;4BAAAC,YAAA;0BAAA;wBAAA,CACzB,CAAC,CAAC;sBACP;oBACJ;kBACJ;gBAEJ;cACJ;YACJ,CAAC,CAAC;YACF;YACA,IAAI/C,SAAS,EAAE;cACX,IAAI8D,UAAU,GAAGjE,WAAW,CAAC,CAAC,CAAC;cAC/BH,MAAM,CAACT,GAAG,CAAC,UAACwB,OAAO,EAAEJ,GAAG,EAAK;gBACzByD,UAAU,GAAGA,UAAU,CAACT,OAAO,CAAC5C,OAAO,CAACsD,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC;gBACvDjE,OAAO,CAACC,GAAG,CAAC+D,UAAU,CAAC;gBACvBhE,OAAO,CAACC,GAAG,CAACU,OAAO,CAAC;cACxB,CAAC,CAAC;cACFT,SAAS,CAACf,GAAG,CAAC,UAACwB,OAAO,EAAEJ,GAAG,EAAK;gBAC5ByD,UAAU,GAAGA,UAAU,CAACT,OAAO,CAAC5C,OAAO,EAAE,EAAE,CAAC;cAChD,CAAC,CAAC;cACFrB,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;gBACrB0I,GAAG,EAAEjD,KAAM;gBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;gBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;gBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;gBACtBC,IAAI,EAAE,EAAG;gBACT7C,KAAK,eAAEtG,KAAA,CAAA8I,aAAA;kBAAM6B,KAAK,EAAE;oBAAEC,UAAU,EAAE;kBAAS,CAAE;kBAAAvB,MAAA,EAAAxG,KAAA;kBAAAyG,QAAA;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA;gBAAA,GAAE,GAAG,GAAGe,UAAU,EAAC,GAAO,CAAE;gBAAApB,MAAA,EAAAxG,KAAA;gBAAAyG,QAAA;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA;cAAA,CAC5E,CAAC,CAAC;cACHzD,SAAS,GAAG,KAAK;YACrB;UACJ;QACJ,CAAC,MAAM;UACHQ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;UACvC,IAAIO,MAAM,GAAGb,IAAI,CAACE,KAAK,CAACC,KAAK,CAAC,uBAAuB,CAAC;UACtDE,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;UACzBD,OAAO,CAACC,GAAG,CAACN,IAAI,CAACE,KAAK,CAAC;UACvB,IAAIY,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;YACvBR,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;YAC3B,IAAIO,MAAM,CAACzI,MAAM,KAAK,CAAC,EAAE;cACrByI,MAAM,CAACrB,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;gBAC3BW,OAAO,CAACC,GAAG,CAACU,OAAO,CAAC;gBACpB,IAAIC,SAAS;gBACb,IAAIC,OAAO,GAAG,WAAW;gBACzB,IAAIC,OAAO,GAAG,CAAC;gBACf,IAAIC,OAAO,GAAG,CAAC;gBACfzC,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;kBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;oBACpD3C,WAAW,CAACiC,GAAG,CAAC,CAACW,KAAK,CAAC/B,GAAG,CAAC,UAACgC,OAAO,EAAEC,MAAM,EAAK;sBAC5C,IAAID,OAAO,CAACE,IAAI,KAAK,qBAAqB,EAAE;wBACxC,IAAIF,OAAO,CAACD,KAAK,KAAK,WAAW,EAAE;0BAC/BJ,OAAO,GAAGA,OAAO,GAAG,CAAC;wBACzB,CAAC,MAAM,IAAIK,OAAO,CAACD,KAAK,KAAK,UAAU,EAAE;0BACrCH,OAAO,GAAGA,OAAO,GAAG,CAAC;wBACzB;sBACJ;oBACJ,CAAC,CAAC;oBACF,IAAID,OAAO,GAAGC,OAAO,EAAE;sBACnBF,OAAO,GAAG,WAAW;oBACzB,CAAC,MAAM,IAAIE,OAAO,GAAG,CAAC,EAAE;sBACpBF,OAAO,GAAG,UAAU;oBACxB;oBACAD,SAAS,GAAGjB,IAAI,CAACjD,QAAQ;kBAC7B;gBACJ,CAAC,CAAC;gBACFyD,MAAM,GAAGrG,kBAAkB,CAAC;kBAAEwH,KAAK,EAAEX,OAAO;kBAAEd,KAAK,EAAEF,IAAI,CAACE,KAAK;kBAAE/C,MAAM,EAAE+D,OAAO;kBAAEnE,QAAQ,EAAEkE;gBAAU,CAAC,CAAC;gBACxGZ,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC;cACvB,CAAC,CAAC;YACN,CAAC,MAAM,IAAIK,MAAM,CAACzI,MAAM,GAAG,CAAC,EAAE;cAC1B,IAAIwJ,OAAO,GAAG5B,IAAI,CAACE,KAAK;cACxBG,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;cAClCD,OAAO,CAACC,GAAG,CAACN,IAAI,CAACE,KAAK,CAAC;cACvB,IAAI2B,WAAW,GAAG,EAAE;cACpBhB,MAAM,CAACrB,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;gBAC3B,IAAIuB,SAAS;gBACb,IAAIC,OAAO,GAAG,WAAW;gBACzB,IAAIC,OAAO,GAAG,CAAC;gBACf,IAAIC,OAAO,GAAG,CAAC;gBACfzC,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;kBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;oBACpD3C,WAAW,CAACiC,GAAG,CAAC,CAACW,KAAK,CAAC/B,GAAG,CAAC,UAACgC,OAAO,EAAEC,MAAM,EAAK;sBAC5C,IAAID,OAAO,CAACE,IAAI,KAAK,qBAAqB,EAAE;wBACxC,IAAIF,OAAO,CAACD,KAAK,KAAK,WAAW,EAAE;0BAC/BJ,OAAO,GAAGA,OAAO,GAAG,CAAC;wBACzB,CAAC,MAAM,IAAIK,OAAO,CAACD,KAAK,KAAK,UAAU,EAAE;0BACrCH,OAAO,GAAGA,OAAO,GAAG,CAAC;wBACzB;sBACJ;oBACJ,CAAC,CAAC;oBACF,IAAID,OAAO,GAAGC,OAAO,EAAE;sBACnBF,OAAO,GAAG,WAAW;oBACzB,CAAC,MAAM,IAAIE,OAAO,GAAG,CAAC,EAAE;sBACpBF,OAAO,GAAG,UAAU;oBACxB;oBACAD,SAAS,GAAGjB,IAAI,CAACjD,QAAQ;kBAC7B;gBACJ,CAAC,CAAC;gBACF8E,WAAW,GAAG1H,kBAAkB,CAAC;kBAAEwH,KAAK,EAAEX,OAAO;kBAAEd,KAAK,EAAE0B,OAAO;kBAAEzE,MAAM,EAAE+D,OAAO;kBAAEnE,QAAQ,EAAEkE;gBAAU,CAAC,CAAC;gBAC1GW,OAAO,GAAGC,WAAW;cACzB,CAAC,CAAC;cACFrB,MAAM,GAAGoB,OAAO;cAChBvB,OAAO,CAACC,GAAG,CAACE,MAAM,CAAC;YACvB;UACJ;;UAEA;;UAEA,IAAIN,KAAK,GAAGM,MAAM,IAAI,EAAE,GAAGA,MAAM,GAAGR,IAAI,CAACE,KAAK;UAC9C,IAAIyB,KAAK,GAAGzB,KAAK,CAACC,KAAK,CAAC,2BAA2B,CAAC;UACpD,IAAIW,KAAK,CAACC,OAAO,CAACY,KAAK,CAAC,EAAE;YACtB,IAAInB,MAAM,IAAI,EAAE,EAAE;cACd,IAAImB,KAAK,CAACvJ,MAAM,KAAK,CAAC,EAAE;gBACpBuJ,KAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;kBAC1B,IAAI4C,QAAQ,GAAG,EAAE;kBACjB,IAAIC,QAAQ,GAAG,KAAK;kBACpB,IAAIvC,IAAI,CAACE,KAAK,IAAI,EAAE,EAAE;oBAClB;oBACA;oBACAN,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;sBACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;wBAC9CF,QAAQ,GAAG,IAAI;sBACnB;oBACJ,CAAC,CAAC;oBACF;oBACA,IAAI,CAACA,QAAQ,EAAE;sBACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;sBAChD1C,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;wBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;0BACpDgB,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;wBACtB;sBACJ,CAAC,CAAC;sBACFjB,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;wBACrB0I,GAAG,EAAEjD,KAAM;wBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;wBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;wBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;wBACtBC,IAAI,EAAE/C,IAAI,CAAC+C,IAAK;wBAChB7C,KAAK,EAAEhG,aAAa,CAAC;0BAAEyH,KAAK,EAAEX,OAAO;0BAAEd,KAAK,EAAEA,KAAK;0BAAE8C,IAAI,EAAErE,WAAW,CAAC2D,QAAQ,CAAC,CAAC,CAAC;wBAAE,CAAC,CAAC,CAAC,CAAC,CAAE;wBAAAW,MAAA,EAAAxG,KAAA;wBAAAyG,QAAA;0BAAAC,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA;sBAAA,CAC7F,CAAC,CAAC;oBACP;kBACJ;gBACJ,CAAC,CAAC;cACN,CAAC,MAAM,IAAI3B,KAAK,CAACvJ,MAAM,GAAG,CAAC,EAAE;gBACzB,IAAIwJ,SAAO,GAAG1B,KAAK;gBACnB,IAAI2B,aAAW,GAAG,EAAE;gBACpB,IAAIU,QAAQ;gBACZZ,KAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;kBAC1B,IAAI4C,QAAQ,GAAG,EAAE;kBACjBC,QAAQ,GAAG,KAAK;kBAChB,IAAIX,SAAO,IAAI,EAAE,EAAE;oBACf;oBACA;oBACAhC,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;sBACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;wBAC9CF,QAAQ,GAAG,IAAI;sBACnB;oBACJ,CAAC,CAAC;oBACF;oBACA,IAAI,CAACA,QAAQ,EAAE;sBACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;sBAChD1C,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;wBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;0BACpDgB,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;wBACtB;sBACJ,CAAC,CAAC;sBACFiB,aAAW,GAAG3H,aAAa,CAAC;wBAAEyH,KAAK,EAAEX,OAAO;wBAAEd,KAAK,EAAE0B,SAAO;wBAAEoB,IAAI,EAAErE,WAAW,CAAC2D,QAAQ,CAAC,CAAC,CAAC;sBAAE,CAAC,CAAC;sBAC/FV,SAAO,GAAGC,aAAW,CAAC,CAAC,CAAC;oBAC5B;kBACJ;gBACJ,CAAC,CAAC;gBACF,IAAI,CAACU,QAAQ,EAAE;kBACX5C,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;oBACrB0I,GAAG,EAAEjD,KAAM;oBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;oBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;oBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;oBACtBC,IAAI,EAAE,EAAG;oBACT7C,KAAK,EAAE2B,aAAW,CAAC,CAAC,CAAE;oBAAAoB,MAAA,EAAAxG,KAAA;oBAAAyG,QAAA;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA;kBAAA,CACzB,CAAC,CAAC;gBACP;cACJ;YACJ,CAAC,MAAM;cACH,IAAI3B,KAAK,CAACvJ,MAAM,KAAK,CAAC,EAAE;gBACpBuJ,KAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;kBAC1B,IAAI4C,QAAQ,GAAG,EAAE;kBACjB,IAAIC,QAAQ,GAAG,KAAK;kBACpB,IAAIvC,IAAI,CAACE,KAAK,IAAI,EAAE,EAAE;oBAClB;oBACA;oBACA;oBACAN,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;sBACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;wBAC9CF,QAAQ,GAAG,IAAI;sBACnB;oBACJ,CAAC,CAAC;oBACF;oBACA,IAAI,CAACA,QAAQ,EAAE;sBACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;sBAChD1C,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;wBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;0BACpDgB,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;wBACtB;sBAEJ,CAAC,CAAC;sBACFjB,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;wBACrB0I,GAAG,EAAEjD,KAAM;wBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;wBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;wBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;wBACtBC,IAAI,EAAE/C,IAAI,CAAC+C,IAAK;wBAChB7C,KAAK,EAAEhG,aAAa,CAAC;0BAAEyH,KAAK,EAAEX,OAAO;0BAAEd,KAAK,EAAEF,IAAI,CAACE,KAAK;0BAAE8C,IAAI,EAAErE,WAAW,CAAC2D,QAAQ,CAAC,CAAC,CAAC;wBAAE,CAAC,CAAC,CAAC,CAAC,CAAE;wBAAAW,MAAA,EAAAxG,KAAA;wBAAAyG,QAAA;0BAAAC,QAAA,EAAAC,YAAA;0BAAAC,UAAA;0BAAAC,YAAA;wBAAA;sBAAA,CAClG,CAAC,CAAC;oBACP;kBACJ;gBACJ,CAAC,CAAC;cACN,CAAC,MAAM,IAAI3B,KAAK,CAACvJ,MAAM,GAAG,CAAC,EAAE;gBACzB,IAAIwJ,SAAO,GAAG5B,IAAI,CAACE,KAAK;gBACxB,IAAI2B,aAAW,GAAG,EAAE;gBACpB,IAAIU,UAAQ;gBACZZ,KAAK,CAACnC,GAAG,CAAC,UAACwB,OAAO,EAAEtB,KAAK,EAAK;kBAC1B,IAAI4C,QAAQ,GAAG,EAAE;kBACjBC,UAAQ,GAAG,KAAK;kBAChB,IAAIX,SAAO,IAAI,EAAE,EAAE;oBACf;oBACA;oBACAhC,OAAO,CAACJ,GAAG,CAAC,UAACiD,KAAK,EAAK;sBACnB,IAAIzB,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKoB,KAAK,EAAE;wBAC9CF,UAAQ,GAAG,IAAI;sBACnB;oBACJ,CAAC,CAAC;oBACF;oBACA,IAAI,CAACA,UAAQ,EAAE;sBACX3C,OAAO,CAAC7H,IAAI,CAACiJ,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;sBAChD1C,WAAW,CAACa,GAAG,CAAC,UAACQ,IAAI,EAAEY,GAAG,EAAK;wBAC3B,IAAII,OAAO,CAAC5H,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACiI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKrB,IAAI,CAACsB,MAAM,EAAE;0BACpDgB,QAAQ,CAACvK,IAAI,CAAC6I,GAAG,CAAC;wBACtB;sBACJ,CAAC,CAAC;sBACFiB,aAAW,GAAG3H,aAAa,CAAC;wBAAEyH,KAAK,EAAEX,OAAO;wBAAEd,KAAK,EAAE0B,SAAO;wBAAEoB,IAAI,EAAErE,WAAW,CAAC2D,QAAQ,CAAC,CAAC,CAAC;sBAAE,CAAC,CAAC;sBAC/FV,SAAO,GAAGC,aAAW,CAAC,CAAC,CAAC;oBAC5B;kBACJ;gBACJ,CAAC,CAAC;gBACF,IAAI,CAACU,UAAQ,EAAE;kBACX5C,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;oBACrB0I,GAAG,EAAEjD,KAAM;oBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;oBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;oBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;oBACtBC,IAAI,EAAE,EAAG;oBACT7C,KAAK,EAAE2B,aAAW,CAAC,CAAC,CAAE;oBAAAoB,MAAA,EAAAxG,KAAA;oBAAAyG,QAAA;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA;kBAAA,CACzB,CAAC,CAAC;gBACP;cACJ;YACJ;UAEJ,CAAC,MAAM;YAEH,IAAIpD,KAAK,IAAI,EAAE,EAAE;cACb,IAAIJ,eAAe,IAAII,KAAK,IAAIJ,eAAe,IAAIE,IAAI,CAACE,KAAK,EAAE;gBAC3DP,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;kBACrB0I,GAAG,EAAEjD,KAAM;kBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;kBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;kBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;kBACtBC,IAAI,EAAE/C,IAAI,CAAC+C,IAAK;kBAChB7C,KAAK,EAAEA,KAAK,GAAG,GAAI;kBAAA+C,MAAA,EAAAxG,KAAA;kBAAAyG,QAAA;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA;gBAAA,CACtB,CACD,CAAC;cACL;cACAxD,eAAe,GAAGE,IAAI,CAACE,KAAK;YAChC,CAAC,MAAM;cACHG,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGJ,KAAK,CAAC;cAClC,IAAIJ,eAAe,IAAIE,IAAI,CAACE,KAAK,EAAE;gBAC/BP,IAAI,CAAC5H,IAAI,cAAC6B,KAAA,CAAA8I,aAAA,CAACzI,cAAc;kBACrB0I,GAAG,EAAEjD,KAAM;kBACXkD,QAAQ,EAAE5C,IAAI,CAAC4C,QAAS;kBACxBC,KAAK,EAAE7C,IAAI,CAAC6C,KAAM;kBAClBC,OAAO,EAAE9C,IAAI,CAAC8C,OAAQ;kBACtBC,IAAI,EAAE/C,IAAI,CAAC+C,IAAK;kBAChB7C,KAAK,EAAEF,IAAI,CAACE,KAAK,GAAG,GAAI;kBAAA+C,MAAA,EAAAxG,KAAA;kBAAAyG,QAAA;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA;gBAAA,CAC3B,CACD,CAAC;cACL;cACAxD,eAAe,GAAGE,IAAI,CAACE,KAAK;YAChC;UACJ;QACJ;QACA;MAGJ,CAAC,CAAC;MACF,OAAOP,IAAI;IACf,CAAC,CAAC;IACFvB,YAAY,CAACmB,IAAI,CAAC;IAClBD,UAAU,CAAC,IAAI,CAAC;IAChBJ,UAAU,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,CAACnB,KAAK,CAAC,CAAC;EAEXlE,SAAS,CAAC,YAAM;IACZ;IACAyF,UAAU,CAAC,KAAK,CAAC;IACjBJ,UAAU,CAAC,IAAI,CAAC;IAChB;IACA,IAAIuF,MAAM,GAAG;MACT3N,MAAM,EAAE,KAAK;MACb4N,GAAG,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,GAAG,wBAAwB,GAAGlH,SAAS,GAAG,eAAe;MAC3FmH,OAAO,EAAE;QAAEC,aAAa,YAAAC,MAAA,CAAYtI,IAAI,CAACuI,KAAK,CAAE;QAAE,cAAc,EAAE;MAAmB;IACzF,CAAC;IACD,IAAMC,QAAQ;MAAA,IAAAC,IAAA,GAAAC,iBAAA,cAAA9R,mBAAA,GAAAmF,IAAA,CAAG,SAAA4M,QAAA;QAAA,IAAAC,MAAA;QAAA,OAAAhS,mBAAA,GAAAuB,IAAA,UAAA0Q,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAtM,IAAA,GAAAsM,QAAA,CAAAjO,IAAA;YAAA;cAAAiO,QAAA,CAAAjO,IAAA;cAAA,OACQwC,KAAK,CAAC0K,MAAM,CAAC,CAAC/N,IAAI,CAAC,UAAC+O,QAAQ,EAAK;gBAClD,IAAIC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,QAAQ,CAAClG,IAAI,CAACyD,IAAI,CAAC;gBAC3ChG,WAAW,CAAC0I,MAAM,CAAC3I,QAAQ,CAAC;gBAC5BK,SAAS,CAACsI,MAAM,CAACvI,MAAM,CAAC;gBACxB;gBACA0I,YAAY,CAACJ,QAAQ,CAAClG,IAAI,CAACZ,WAAW,EAAE+G,MAAM,CAAC/G,WAAW,CAAC;cAC/D,CAAC,CAAC;YAAA;cANI2G,MAAM,GAAAE,QAAA,CAAAvO,IAAA;YAAA;YAAA;cAAA,OAAAuO,QAAA,CAAAnM,IAAA;UAAA;QAAA,GAAAgM,OAAA;MAAA,CAOf;MAAA,gBARKH,QAAQA,CAAA;QAAA,OAAAC,IAAA,CAAAW,KAAA,OAAAC,SAAA;MAAA;IAAA,GAQb;IACDb,QAAQ,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMW,YAAY,GAAG,SAAfA,YAAYA,CAAIG,OAAO,EAAEhD,IAAI,EAAK;IACpC;IACA,IAAIgD,OAAO,EAAE;MACTpH,cAAc,CAACoE,IAAI,CAAC;MACpBiD,QAAQ,CAACD,OAAO,CAAC;IACrB;EACJ,CAAC;EAED,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAID,OAAO,EAAK;IAC1B,IAAIE,SAAS,GAAGF,OAAO,CAACG,MAAM,CAAC3G,GAAG,CAAC,UAACQ,IAAI,EAAK;MACzC,IAAIoG,KAAK,GAAG,EAAE;MACd,IAAIrG,KAAK,GAAG,EAAE;MACd,IAAIsG,OAAO,GAAG,EAAE;MAChB,IAAIC,UAAU,GAAG,EAAE;MACnB,IAAIC,IAAI,GAAG,CAAC;MACZ,IAAIvG,IAAI,CAACT,IAAI,CAAC,YAAY,CAAC,EAAE;QACzB6G,KAAK,GAAGpG,IAAI,CAACT,IAAI,CAAC,YAAY,CAAC;MACnC;MACA,IAAIS,IAAI,CAACwG,iBAAiB,CAACpO,MAAM,GAAG,CAAC,EAAE;QACnC4H,IAAI,CAACwG,iBAAiB,CAACpQ,OAAO,CAAC,UAACqQ,MAAM,EAAK;UACvC,IAAIJ,OAAO,CAACrE,OAAO,CAACyE,MAAM,CAACC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;YACvCL,OAAO,CAACtO,IAAI,CAAC0O,MAAM,CAACC,MAAM,CAAC;UAC/B;UACA,IAAIL,OAAO,CAACrE,OAAO,CAACyE,MAAM,CAACC,MAAM,GAAGD,MAAM,CAACrO,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;YACvDiO,OAAO,CAACtO,IAAI,CAAC0O,MAAM,CAACC,MAAM,GAAGD,MAAM,CAACrO,MAAM,CAAC;UAC/C;QACJ,CAAC,CAAC;QACFiO,OAAO,CAACtO,IAAI,CAACiI,IAAI,CAAC2G,IAAI,CAACvO,MAAM,CAAC;QAC9BiO,OAAO,CAACO,IAAI,CAAC,UAACzS,CAAC,EAAE0S,CAAC;UAAA,OAAK1S,CAAC,GAAG0S,CAAC;QAAA,EAAC;QAC7BR,OAAO,CAACjQ,OAAO,CAAC,UAAC4K,OAAO,EAAK;UACzBsF,UAAU,CAACvO,IAAI,CAAC;YAAE4O,IAAI,EAAE3G,IAAI,CAAC2G,IAAI,CAACvN,KAAK,CAACmN,IAAI,EAAEvF,OAAO,CAAC;YAAEL,MAAM,EAAE4F,IAAI;YAAEO,GAAG,EAAE9F;UAAQ,CAAC,CAAC;UACrFuF,IAAI,GAAGvF,OAAO;QAClB,CAAC,CAAC;QACFsF,UAAU,CAAClQ,OAAO,CAAC,UAAC4K,OAAO,EAAK;UAC5B,IAAI+F,YAAY,GAAG,KAAK;UACxB,IAAIC,WAAW,GAAG,KAAK;UACvBhH,IAAI,CAACwG,iBAAiB,CAACpQ,OAAO,CAAC,UAAC4J,IAAI,EAAK;YACrC,IAAIgB,OAAO,CAACL,MAAM,IAAIX,IAAI,CAAC0G,MAAM,IAAI1F,OAAO,CAAC8F,GAAG,IAAK9G,IAAI,CAAC0G,MAAM,GAAG1G,IAAI,CAAC5H,MAAO,EAAE;cAC7E,QAAQ4H,IAAI,CAACuE,KAAK;gBACd,KAAK,MAAM;kBAAEwC,YAAY,GAAG,IAAI;kBAAE;gBAClC,KAAK,QAAQ;kBAAEC,WAAW,GAAG,IAAI;kBAAE;cACvC;YACJ;UACJ,CAAC,CAAC;UACFjH,KAAK,CAAChI,IAAI,CAAC;YACP8K,KAAK,EAAE,OAAO;YACdD,QAAQ,EAAEmE,YAAY;YACtBjE,OAAO,EAAEkE,WAAW;YACpBjE,IAAI,EAAE,IAAI;YACV7C,KAAK,EAAEc,OAAO,CAAC2F;UACnB,CAAC,CAAC;QACN,CAAC,CAAC;MACN,CAAC,MAAM;QACH5G,KAAK,CAAChI,IAAI,CAAC;UACP8K,KAAK,EAAE,OAAO;UACdD,QAAQ,EAAE,KAAK;UACfE,OAAO,EAAE,KAAK;UACdC,IAAI,EAAE,IAAI;UACV7C,KAAK,EAAEF,IAAI,CAAC2G;QAChB,CAAC,CAAC;MACN;MACA,OAAO;QAAEP,KAAK,EAALA,KAAK;QAAErG,KAAK,EAALA;MAAM,CAAC;IAC3B,CAAC,CAAC;IACF;IACA/B,QAAQ,CAACkI,SAAS,CAAC;EACvB,CAAC;EAGD,oBACItM,KAAA,CAAA8I,aAAA;IAAAO,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACI1J,KAAA,CAAA8I,aAAA,CAACnI,OAAO;IACJ0M,KAAK,EAAC,+BAA4B;IAClCC,SAAS,EAAC,QAAQ;IAClBC,QAAQ,eAAEvN,KAAA,CAAA8I,aAAA;MAAAO,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAM,wDAA4D,CAAE;IAAAL,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACjF,CAAC,eACF1J,KAAA,CAAA8I,aAAA,CAAClI,aAAa;IAAAyI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACV1J,KAAA,CAAA8I,aAAA,CAACjI,QAAQ;IAAC2M,EAAE,EAAE,CAAE;IAAC7C,KAAK,EAAE;MAAE7I,MAAM,EAAE;IAAO,CAAE;IAAAuH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACvC1J,KAAA,CAAA8I,aAAA,CAAChI,IAAI;IAAAuI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACD1J,KAAA,CAAA8I,aAAA,CAAC7H,UAAU;IAACmB,KAAK,EAAC,SAAS;IAAC2K,IAAI;IAAA1D,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC5B1J,KAAA,CAAA8I,aAAA,CAAC/H,QAAQ;IAAC0M,SAAS,EAAExI,OAAO,CAACyI,QAAS;IAACtL,KAAK,EAAC,SAAS;IAAAiH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAClD1J,KAAA,CAAA8I,aAAA;IAAI2E,SAAS,EAAExI,OAAO,CAAC0I,UAAW;IAAAtE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,qCAAoC,CACjE,CACF,CAAC,eAEb1J,KAAA,CAAA8I,aAAA,CAAC9H,QAAQ;IAAAqI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACL1J,KAAA,CAAA8I,aAAA;IAAK6B,KAAK,EAAE;MAAE2C,SAAS,EAAE,QAAQ;MAAEM,YAAY,EAAE;IAAO,CAAE;IAAAvE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACrDrE,OAAO,iBAAIrF,KAAA,CAAA8I,aAAA,CAAC1H,gBAAgB;IAACqM,SAAS,EAAEvI,QAAQ,CAACzC,QAAS;IAAC0G,IAAI,EAAE,GAAI;IAAC/G,KAAK,EAAC,SAAS;IAAAiH,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,EACxFjE,OAAO,gBAAGzF,KAAA,CAAA8I,aAAA,CAACzH,KAAK;IAACwM,QAAQ,EAAC,SAAS;IAAAxE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,qDAAuD,CAAC,gBAAG1J,KAAA,CAAA8I,aAAA;IAAAO,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAM,CACrG,CAAC,EACLnF,SAAS,CAACqB,GAAG,CAAC,UAACQ,IAAI,EAAEN,KAAK,EAAK;IAC5B,IAAI0G,KAAK;IACT,IAAIrI,KAAK,CAAC2B,KAAK,CAAC,CAAC0G,KAAK,KAAK,MAAM,EAAE;MAC/BA,KAAK,GAAG,SAAS;IACrB,CAAC,MAAM;MACHA,KAAK,GAAGrI,KAAK,CAAC2B,KAAK,CAAC,CAAC0G,KAAK;IAC9B;IACA,oBAAQxM,KAAA,CAAA8I,aAAA;MAAG6B,KAAK,EAAE;QAAE2C,SAAS,EAAEd;MAAM,CAAE;MAACzD,GAAG,EAAEjD,KAAM;MAAAuD,MAAA,EAAAxG,KAAA;MAAAyG,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAAC1J,KAAA,CAAA8I,aAAA;MAAAO,MAAA,EAAAxG,KAAA;MAAAyG,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAItD,IAAQ,CAAI,CAAC;EAEzE,CAAC,CACK,CACR,CACA,CACC,CACd,CAAC;AAEd","ignoreList":[]},"metadata":{},"sourceType":"module"}