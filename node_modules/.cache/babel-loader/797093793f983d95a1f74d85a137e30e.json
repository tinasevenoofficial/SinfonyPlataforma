{"ast":null,"code":"import { get as r, set as i } from \"react-hook-form\";\nvar e = function e(i, _e, t) {\n    if (i && \"reportValidity\" in i) {\n      var f = r(t, _e);\n      i.setCustomValidity(f && f.message || \"\"), i.reportValidity();\n    }\n  },\n  t = function t(r, i) {\n    var t = function t(_t) {\n      var f = i.fields[_t];\n      f && f.ref && \"reportValidity\" in f.ref ? e(f.ref, _t, r) : f.refs && f.refs.forEach(function (i) {\n        return e(i, _t, r);\n      });\n    };\n    for (var f in i.fields) t(f);\n  },\n  f = function f(e, _f) {\n    _f.shouldUseNativeValidation && t(e, _f);\n    var o = {};\n    for (var a in e) {\n      var n = r(_f.fields, a);\n      i(o, a, Object.assign(e[a], {\n        ref: n && n.ref\n      }));\n    }\n    return o;\n  };\nexport { f as toNestError, t as validateFieldsNatively };","map":{"version":3,"names":["e","i","t","f","r","setCustomValidity","message","reportValidity","fields","ref","refs","forEach","shouldUseNativeValidation","o","a","n","Object","assign","toNestError","validateFieldsNatively"],"sources":["../src/validateFieldsNatively.ts","../src/toNestError.ts"],"sourcesContent":["import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"],"mappings":";AAIA,IAAMA,CAAA,GAAoB,SAApBA,EAAqBC,CAAA,EAAUD,EAAA,EAAmBE,CAAA;IACtD,IAAID,CAAA,IAAO,oBAAoBA,CAAA,EAAK;MAClC,IAAME,CAAA,GAAQC,CAAA,CAAIF,CAAA,EAAQF,EAAA;MAC1BC,CAAA,CAAII,iBAAA,CAAmBF,CAAA,IAASA,CAAA,CAAMG,OAAA,IAAY,KAElDL,CAAA,CAAIM,cAAA;IAAA;EAAA;EAKKL,CAAA,GAAyB,SAAzBA,EACXE,CAAA,EACAH,CAAA;IAAA,IAAAC,CAAA,YAAAA,EAIWA,EAAA;MACT,IAAMC,CAAA,GAAQF,CAAA,CAAQO,MAAA,CAAON,EAAA;MACzBC,CAAA,IAASA,CAAA,CAAMM,GAAA,IAAO,oBAAoBN,CAAA,CAAMM,GAAA,GAClDT,CAAA,CAAkBG,CAAA,CAAMM,GAAA,EAAKP,EAAA,EAAWE,CAAA,IAC/BD,CAAA,CAAMO,IAAA,IACfP,CAAA,CAAMO,IAAA,CAAKC,OAAA,CAAQ,UAACV,CAAA;QAAA,OAA0BD,CAAA,CAAkBC,CAAA,EAAKC,EAAA,EAAWE,CAAA;MAAA;IAAA;IALpF,KAAK,IAAMD,CAAA,IAAaF,CAAA,CAAQO,MAAA,EAAAN,CAAA,CAArBC,CAAA;EAAA;ECXAA,CAAA,GAAc,SAAdA,EACXH,CAAA,EACAG,EAAA;IAEAA,EAAA,CAAQS,yBAAA,IAA6BV,CAAA,CAAuBF,CAAA,EAAQG,EAAA;IAEpE,IAAMU,CAAA,GAAc;IACpB,KAAK,IAAMC,CAAA,IAAQd,CAAA,EAAQ;MACzB,IAAMe,CAAA,GAAQX,CAAA,CAAID,EAAA,CAAQK,MAAA,EAAQM,CAAA;MAElCb,CAAA,CACEY,CAAA,EACAC,CAAA,EACAE,MAAA,CAAOC,MAAA,CAAOjB,CAAA,CAAOc,CAAA,GAAO;QAAEL,GAAA,EAAKM,CAAA,IAASA,CAAA,CAAMN;MAAA;IAAA;IAItD,OAAOI,CAAA;EAAA;AAAA,SAAAV,CAAA,IAAAe,WAAA,EAAAhB,CAAA,IAAAiB,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}